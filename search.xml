<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>羡慕会讲故事的人吗？想成为他们吗？来看这里！</title>
    <url>/post/f887fa47.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我总是对会讲故事的人心生崇拜，见贤思齐，深刻反思，因是腹无点墨。需要备一些故事了，让自己在想说什么的时候可以“引经据典”，以后带小孩的时候，也可以心有所想，故事牵引。</p>
<p>这些故事大多是书上看的转化的，先记录，再升华。</p>
<ol>
<li><p>诗仙李白的一生</p>
</li>
<li><p>杀死一只知更鸟</p>
</li>
<li><p>吃货词人苏轼的一生</p>
</li>
<li><p>老人与海，硬汉的浪漫</p>
</li>
</ol>
]]></content>
      <categories>
        <category>大纲</category>
      </categories>
      <tags>
        <tag>大纲</tag>
        <tag>故事</tag>
      </tags>
  </entry>
  <entry>
    <title>技多不压身！少年，来此学一技！这里有100本秘籍</title>
    <url>/post/9a1684cf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我也是一个非常喜欢学习新技能的人，曾看过一集TED的演讲，广为流传的10000小时定律，是成为专家的时间，而学会一项新技能只需要：<strong>20小时</strong></p>
<ol>
<li>所有读书人必备的技能：速读！</li>
<li>好记性不如烂笔头？不过我也想要好记性啊！</li>
</ol>
]]></content>
      <categories>
        <category>大纲</category>
      </categories>
      <tags>
        <tag>大纲</tag>
        <tag>技能</tag>
      </tags>
  </entry>
  <entry>
    <title>就在这里！每个安卓开发都要掌握的知识大纲！</title>
    <url>/post/android-main-point.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>此文适用于所有安卓开发和想从事安卓开发的人</p>
<ol>
<li><a href="/post/java-base-guide.html" title="学Java？这里有一本秘籍！">学Java？这里有一本秘籍！</a></li>
<li><a href="/post/5d81f735.html" title="Java面试！通过问题来串联知识">Java面试！通过问题来串联知识</a></li>
<li><a href="/post/android-base-guide.html" title="学Android？这里有一本秘籍！">学Android？这里有一本秘籍！</a></li>
</ol>
<h2 id="三、万变不离其宗-设计模式"><a href="#三、万变不离其宗-设计模式" class="headerlink" title="三、万变不离其宗-设计模式"></a>三、万变不离其宗-设计模式</h2><h2 id="四、恶补基础知识"><a href="#四、恶补基础知识" class="headerlink" title="四、恶补基础知识"></a>四、恶补基础知识</h2><p>设计模式、网络原理、数据结构、算法</p>
<h2 id="五、探索Java-VM"><a href="#五、探索Java-VM" class="headerlink" title="五、探索Java VM"></a>五、探索Java VM</h2><h2 id="六、探索开源库的原理"><a href="#六、探索开源库的原理" class="headerlink" title="六、探索开源库的原理"></a>六、探索开源库的原理</h2><h2 id="七、学习其他开发语言"><a href="#七、学习其他开发语言" class="headerlink" title="七、学习其他开发语言"></a>七、学习其他开发语言</h2><p>Kotlin、C++</p>
<h2 id="八、学习一些有难度的开源库"><a href="#八、学习一些有难度的开源库" class="headerlink" title="八、学习一些有难度的开源库"></a>八、学习一些有难度的开源库</h2><h2 id="九、探索系统源码"><a href="#九、探索系统源码" class="headerlink" title="九、探索系统源码"></a>九、探索系统源码</h2><h2 id="十、学无止境"><a href="#十、学无止境" class="headerlink" title="十、学无止境"></a>十、学无止境</h2><p>学会另一门语言-Kotlin</p>
]]></content>
      <categories>
        <category>大纲</category>
      </categories>
      <tags>
        <tag>大纲</tag>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>口袋改版工具盒实操-究极绿宝石5.5</title>
    <url>/post/c36dcexp67b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>技巧分享</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerShell无法识别node命令，如何配置？</title>
    <url>/post/b558d475.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>问题背景：VSCode的默认终端（Terminal）是PowerShell，安装了node后，输入node报错：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\xuzhijian&gt; npm</span><br><span class="line">npm : 无法加载文件 C:\Program Files\nodejs\npm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsof</span><br><span class="line">t.com/fwlink/?LinkID=<span class="number">135170</span> 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:<span class="number">1</span> 字符: <span class="number">1</span></span><br><span class="line">+ npm</span><br><span class="line">+ ~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="⚙️-一、问题根源分析"><a href="#⚙️-一、问题根源分析" class="headerlink" title="⚙️ 一、问题根源分析"></a>⚙️ <strong>一、问题根源分析</strong></h3><p>PowerShell无法识别<code>node</code>命令，但CMD正常，通常由以下原因导致：  </p>
<ol>
<li><strong>环境变量加载差异</strong>  <ul>
<li>PowerShell未正确继承系统环境变量中的Node.js路径（如<code>C:\Program Files\nodejs</code>）。</li>
</ul>
</li>
<li><strong>PowerShell执行策略限制</strong>  <ul>
<li>默认策略（如<code>Restricted</code>）阻止脚本执行（包括<code>npm.cmd</code>）。</li>
</ul>
</li>
<li><strong>文件关联错误</strong>  <ul>
<li><code>.cmd</code>文件被关联到文本编辑器而非命令行解释器。</li>
</ul>
</li>
<li><strong>路径冲突或安装损坏</strong>  <ul>
<li>旧版本残留、多版本Node.js冲突，或安装不完整。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="🛠️-二、VSCode终端切换为CMD-PowerShell的方法"><a href="#🛠️-二、VSCode终端切换为CMD-PowerShell的方法" class="headerlink" title="🛠️ 二、VSCode终端切换为CMD&#x2F;PowerShell的方法"></a>🛠️ <strong>二、VSCode终端切换为CMD&#x2F;PowerShell的方法</strong></h3><h4 id="方法1：通过GUI设置默认终端"><a href="#方法1：通过GUI设置默认终端" class="headerlink" title="方法1：通过GUI设置默认终端"></a><strong>方法1：通过GUI设置默认终端</strong></h4><ol>
<li>打开VSCode，按 <strong><code>Ctrl+Shift+P</code></strong> 打开命令面板。  </li>
<li>输入并选择 **<code>Terminal: Select Default Profile</code>**。  </li>
<li>从列表中选择：  <ul>
<li>**<code>Command Prompt</code>**（设为CMD）  </li>
<li>**<code>PowerShell</code>**（设为PowerShell）。</li>
</ul>
</li>
</ol>
<h4 id="方法2：修改settings-json（持久化配置）"><a href="#方法2：修改settings-json（持久化配置）" class="headerlink" title="方法2：修改settings.json（持久化配置）"></a><strong>方法2：修改<code>settings.json</code>（持久化配置）</strong></h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Command Prompt&quot;</span><span class="punctuation">,</span> <span class="comment">// 设为CMD</span></span><br><span class="line">  <span class="comment">// 或</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span><span class="punctuation">,</span>     <span class="comment">// 设为PowerShell</span></span><br><span class="line">  <span class="comment">// 若需同时支持两者，定义终端配置文件：</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Command Prompt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminal-cmd&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;PowerShell&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;terminal-powershell&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>⚠️ <strong>注</strong>：修改后重启VSCode生效。</p>
</blockquote>
<hr>
<h3 id="⚡-三、解决PowerShell无法运行Node-npm的问题"><a href="#⚡-三、解决PowerShell无法运行Node-npm的问题" class="headerlink" title="⚡ 三、解决PowerShell无法运行Node&#x2F;npm的问题"></a>⚡ <strong>三、解决PowerShell无法运行Node&#x2F;npm的问题</strong></h3><h4 id="步骤1：验证并修复环境变量"><a href="#步骤1：验证并修复环境变量" class="headerlink" title="步骤1：验证并修复环境变量"></a><strong>步骤1：验证并修复环境变量</strong></h4><ol>
<li><strong>检查路径是否加载</strong>：  <ul>
<li>在PowerShell终端运行：<code>$env:PATH</code>，确认是否包含Node.js安装路径（如<code>C:\Program Files\nodejs</code>）。  </li>
<li>若缺失，手动注入路径：  <pre class=" language-powershell"><code class="language-powershell"><span class="token variable">$env</span>:PATH = <span class="token string">"C:\Program Files\nodejs;"</span> <span class="token operator">+</span> <span class="token variable">$env</span>:PATH  <span class="token comment" spellcheck="true"># 临时生效</span>
</code></pre>
永久生效需在系统环境变量<code>Path</code>中添加该路径。</li>
</ul>
</li>
</ol>
<h4 id="步骤2：修改PowerShell执行策略"><a href="#步骤2：修改PowerShell执行策略" class="headerlink" title="步骤2：修改PowerShell执行策略"></a><strong>步骤2：修改PowerShell执行策略</strong></h4><ol>
<li>查看当前策略：  <pre class=" language-powershell"><code class="language-powershell">Get<span class="token operator">-</span>ExecutionPolicy  <span class="token comment" spellcheck="true"># 若返回Restricted则需修改</span>
</code></pre>
</li>
<li>更改为允许脚本运行：  <pre class=" language-powershell"><code class="language-powershell"><span class="token function">Set</span><span class="token operator">-</span>ExecutionPolicy RemoteSigned <span class="token operator">-</span>Scope CurrentUser  <span class="token comment" spellcheck="true"># 推荐</span>
</code></pre>
<blockquote>
<p>✅ <strong>安全提示</strong>：<code>RemoteSigned</code>允许本地脚本运行，仅远程脚本需签名。</p>
</blockquote>
</li>
</ol>
<h4 id="步骤3：修复文件关联"><a href="#步骤3：修复文件关联" class="headerlink" title="步骤3：修复文件关联"></a><strong>步骤3：修复文件关联</strong></h4><ul>
<li>若<code>npm</code>被关联到文本编辑器：  <pre class=" language-powershell"><code class="language-powershell">cmd <span class="token operator">/</span>c <span class="token string">"assoc .cmd=cmdfile"</span>  <span class="token comment" spellcheck="true"># 重置.cmd文件关联</span>
cmd <span class="token operator">/</span>c <span class="token string">"ftype cmdfile=%SystemRoot%\System32\cmd.exe /c `"%1`" %*"</span>  <span class="token comment" spellcheck="true"># 关联到CMD</span>
</code></pre>
完成后验证：<code>Get-Command npm</code> 应返回<code>C:\Program Files\nodejs\npm.cmd</code>。</li>
</ul>
<h4 id="步骤4：清理冲突或重装Node-js"><a href="#步骤4：清理冲突或重装Node-js" class="headerlink" title="步骤4：清理冲突或重装Node.js"></a><strong>步骤4：清理冲突或重装Node.js</strong></h4><ul>
<li>卸载Node.js → 删除残留目录（<code>C:\Program Files\nodejs</code>和<code>%AppData%\npm</code>） → 重装时勾选 **<code>Add to PATH</code>**。  </li>
<li>推荐使用 <strong>nvm-windows</strong> 管理多版本，避免路径冲突：  <pre class=" language-powershell"><code class="language-powershell">choco install nvm  <span class="token comment" spellcheck="true"># 通过Chocolatey安装</span>
nvm install latest
nvm use latest
</code></pre>
</li>
</ul>
<hr>
<h3 id="🌐-四、虚拟环境（如Conda）的特殊配置"><a href="#🌐-四、虚拟环境（如Conda）的特殊配置" class="headerlink" title="🌐 四、虚拟环境（如Conda）的特殊配置"></a>🌐 <strong>四、虚拟环境（如Conda）的特殊配置</strong></h3><p>若使用Anaconda，需在<code>settings.json</code>中指定激活脚本路径：  </p>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"terminal.integrated.shellArgs.windows"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"/K"</span><span class="token punctuation">,</span> 
    <span class="token string">"F:\\Anaconda\\Scripts\\activate.bat F:\\Anaconda"</span>  // 替换为你的路径
  <span class="token punctuation">]</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<blockquote>
<p>⚠️ 避免PowerShell与Conda命令冲突，建议默认终端设为CMD。</p>
</blockquote>
<hr>
<h3 id="🧩-五、高级场景：同时管理多终端会话"><a href="#🧩-五、高级场景：同时管理多终端会话" class="headerlink" title="🧩 五、高级场景：同时管理多终端会话"></a>🧩 <strong>五、高级场景：同时管理多终端会话</strong></h3><p>通过插件 <strong>Terminals Manager</strong> 实现：  </p>
<ol>
<li>安装插件：VSCode扩展市场搜索 **<code>Terminals Manager</code>**。  </li>
<li>创建配置文件（<code>.vscode/terminals.json</code>）：</li>
</ol>
<pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"terminals"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"前端服务"</span><span class="token punctuation">,</span>
      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"npm start"</span><span class="token punctuation">,</span>
      <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token string">"cmd.exe"</span>  // 指定CMD运行
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>
    &amp;#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"后端调试"</span><span class="token punctuation">,</span>
      <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"python app.py"</span><span class="token punctuation">,</span>
      <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token string">"powershell.exe"</span>  // 指定PowerShell运行
    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token punctuation">]</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<ol start="3">
<li>一键启动：命令面板运行 **<code>Terminals: Run</code>**。</li>
</ol>
<hr>
<h3 id="💎-快速操作指南"><a href="#💎-快速操作指南" class="headerlink" title="💎 快速操作指南"></a>💎 快速操作指南</h3><table>
<thead>
<tr>
<th>问题类型</th>
<th>关键操作</th>
<th>生效范围</th>
</tr>
</thead>
<tbody><tr>
<td>终端类型切换</td>
<td><code>Ctrl+Shift+P</code> → <code>Terminal: Select Default Profile</code></td>
<td>用户级</td>
</tr>
<tr>
<td>PowerShell无法运行Node</td>
<td><code>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</code></td>
<td>当前用户</td>
</tr>
<tr>
<td>修复npm文件关联</td>
<td><code>cmd /c &quot;assoc .cmd=cmdfile&quot;</code> + <code>ftype</code>命令</td>
<td>系统级</td>
</tr>
<tr>
<td>Conda环境激活冲突</td>
<td>设置<code>terminal.integrated.shellArgs.windows</code></td>
<td>项目级</td>
</tr>
</tbody></table>
<hr>
<h3 id="💬-总结"><a href="#💬-总结" class="headerlink" title="💬 总结"></a>💬 <strong>总结</strong></h3><ul>
<li><strong>优先用CMD</strong>：兼容性更好，避免虚拟环境和脚本执行问题。  </li>
<li><strong>PowerShell修复核心</strong>：环境变量 &gt; 执行策略 &gt; 文件关联 &gt; 重装Node.js。  </li>
<li><strong>复杂场景</strong>：通过<code>settings.json</code>精细控制终端行为，或使用Terminals Manager插件并行管理任务。</li>
</ul>
<blockquote>
<p>若问题持续，检查系统是否残留旧版本Node（如<code>C:\Windows\system32\npm</code>），删除后重启。</p>
</blockquote>
]]></content>
      <categories>
        <category>powershell</category>
        <category>node</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows命令行双雄对决：深入解析PowerShell与CMD的终极差异</title>
    <url>/post/3ecea523.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>一场跨越40年的命令行进化史</p>
</blockquote>
<p>在Windows系统中，<strong>命令行界面</strong>始终是系统管理员和开发者的核心工具。当我们打开Windows的命令行工具时，实际上面对着两个截然不同的世界：<strong>传统的CMD（命令提示符）</strong>和<strong>现代的PowerShell</strong>。它们看似相似，实则有着天壤之别。今天，我们将深入探索这对“命令行双生子”的差异与奥秘。</p>
<h2 id="一、前世今生：从DOS到智能终端"><a href="#一、前世今生：从DOS到智能终端" class="headerlink" title="一、前世今生：从DOS到智能终端"></a>一、前世今生：从DOS到智能终端</h2><h3 id="1-CMD：老兵的传承"><a href="#1-CMD：老兵的传承" class="headerlink" title="1. CMD：老兵的传承"></a>1. <strong>CMD：老兵的传承</strong></h3><ul>
<li><strong>诞生背景</strong>：CMD的前身可以追溯到1981年的MS-DOS系统，1993年随Windows NT首次亮相，成为Windows系统的标准命令行工具。</li>
<li><strong>设计理念</strong>：专注于<strong>简单文本处理</strong>和<strong>基础系统操作</strong>，延续了DOS命令的简洁风格（如<code>dir</code>、<code>copy</code>等）。</li>
<li><strong>现状</strong>：微软已停止功能更新，但出于兼容性考虑仍保留在系统中。</li>
</ul>
<p><img src="https://example.com/cmd-screenshot.jpg" alt="CMD界面示例"><br><em>（典型的CMD界面：简洁但功能有限）</em></p>
<h3 id="2-PowerShell：新生代的力量"><a href="#2-PowerShell：新生代的力量" class="headerlink" title="2. PowerShell：新生代的力量"></a>2. <strong>PowerShell：新生代的力量</strong></h3><ul>
<li><strong>诞生背景</strong>：2006年由微软工程师Jeffrey Snover推出（项目代号“Monad”），目标是创建<strong>面向对象的自动化平台</strong>。</li>
<li><strong>设计理念</strong>：基于**.NET框架<strong>，支持</strong>对象操作**而不仅是文本，提供1300多个专用命令（称为<code>cmdlet</code>）。</li>
<li><strong>进化里程碑</strong>：<ul>
<li>2016年：跨平台支持（PowerShell Core）</li>
<li>2020年：全面开源</li>
<li>2025年：最新版PowerShell 7.4支持AI辅助编码</li>
</ul>
</li>
</ul>
<h2 id="二、核心差异九宫格：全方位对比"><a href="#二、核心差异九宫格：全方位对比" class="headerlink" title="二、核心差异九宫格：全方位对比"></a>二、核心差异九宫格：全方位对比</h2><table>
<thead>
<tr>
<th><strong>功能维度</strong></th>
<th><strong>CMD</strong></th>
<th><strong>PowerShell</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>数据处理</strong></td>
<td>仅处理文本（如<code>dir &gt; file.txt</code>）</td>
<td>支持对象管道（如<code>Get-Process | Where CPU -gt 50</code>）</td>
</tr>
<tr>
<td><strong>脚本能力</strong></td>
<td>基础批处理（.bat），缺乏高级逻辑</td>
<td>完整编程语言（变量、循环、类、错误处理）</td>
</tr>
<tr>
<td><strong>远程管理</strong></td>
<td>需第三方工具（如PuTTY）</td>
<td>原生支持（<code>Enter-PSSession</code>）</td>
</tr>
<tr>
<td><strong>扩展性</strong></td>
<td>无法扩展</td>
<td>模块化设计（PowerShell Gallery）</td>
</tr>
<tr>
<td><strong>跨平台</strong></td>
<td>仅限Windows</td>
<td>支持Windows&#x2F;Linux&#x2F;macOS</td>
</tr>
<tr>
<td><strong>语法可读性</strong></td>
<td>像电报简码（<code>taskkill /IM notepad.exe</code>）</td>
<td>类自然语言（<code>Stop-Process -Name notepad</code>）</td>
</tr>
<tr>
<td><strong>系统集成深度</strong></td>
<td>基础文件&#x2F;进程操作</td>
<td>直接操作注册表、WMI、.NET库</td>
</tr>
<tr>
<td><strong>启动速度</strong></td>
<td>闪电级（约15ms）</td>
<td>较慢（约800ms）</td>
</tr>
<tr>
<td><strong>内存占用</strong></td>
<td>约3MB</td>
<td>约80MB</td>
</tr>
</tbody></table>
<h2 id="三、实战代码对比：相同任务的不同实现"><a href="#三、实战代码对比：相同任务的不同实现" class="headerlink" title="三、实战代码对比：相同任务的不同实现"></a>三、实战代码对比：相同任务的不同实现</h2><h3 id="▶-案例1：查找大文件并备份"><a href="#▶-案例1：查找大文件并备份" class="headerlink" title="▶ 案例1：查找大文件并备份"></a>▶ 案例1：查找大文件并备份</h3><p><strong>CMD实现（文本处理繁琐）</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">for /r C:\Logs %%i in (*.log) do (</span><br><span class="line">  if %%~zi gtr 104857600 (</span><br><span class="line">    copy &quot;%%i&quot; D:\Backup\LargeLogs\</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>PowerShell实现（对象操作直观）</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Get-ChildItem</span> C:\Logs <span class="literal">-Recurse</span> <span class="literal">-Filter</span> *.log | </span><br><span class="line"><span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.Length <span class="operator">-gt</span> <span class="number">100</span>MB &#125; |</span><br><span class="line"><span class="built_in">Copy-Item</span> <span class="literal">-Destination</span> D:\Backup\LargeLogs <span class="literal">-PassThru</span> |</span><br><span class="line"><span class="built_in">Export-Csv</span> <span class="literal">-Path</span> backup_report.csv</span><br></pre></td></tr></table></figure>
<p><em>✅ PowerShell优势：支持对象过滤、自动生成备份报告</em></p>
<hr>
<h3 id="▶-案例2：服务监控与告警"><a href="#▶-案例2：服务监控与告警" class="headerlink" title="▶ 案例2：服务监控与告警"></a>▶ 案例2：服务监控与告警</h3><p><strong>CMD局限</strong>：<br>只能检查服务状态，无法直接发送通知：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc query MyService | findstr &quot;RUNNING&quot;</span><br></pre></td></tr></table></figure>

<p><strong>PowerShell解决方案</strong>：<br>一站式完成状态检查+邮件告警：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$service</span> = <span class="built_in">Get-Service</span> <span class="literal">-Name</span> MyService</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$service</span>.Status <span class="operator">-ne</span> <span class="string">&#x27;Running&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">Start-Service</span> <span class="variable">$service</span></span><br><span class="line">    <span class="built_in">Send-MailMessage</span> <span class="literal">-To</span> <span class="string">&quot;admin@company.com&quot;</span> <span class="literal">-Subject</span> <span class="string">&quot;服务恢复&quot;</span> `</span><br><span class="line">                     <span class="literal">-Body</span> <span class="string">&quot;<span class="variable">$</span>(<span class="variable">$service</span>.Name)已重新启动&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>✅ PowerShell优势：集成自动化操作与通知系统</em></p>
<h2 id="四、选择指南：何时用哪个？"><a href="#四、选择指南：何时用哪个？" class="headerlink" title="四、选择指南：何时用哪个？"></a>四、选择指南：何时用哪个？</h2><h3 id="✅-优先选择CMD的场景"><a href="#✅-优先选择CMD的场景" class="headerlink" title="✅ 优先选择CMD的场景"></a>✅ <strong>优先选择CMD的场景</strong></h3><ol>
<li><strong>执行遗留批处理脚本</strong>（.bat或.cmd文件）</li>
<li><strong>古董设备维护</strong>（如Windows XP&#x2F;2003系统）</li>
<li><strong>简单文件操作</strong>（如<code>del /s *.tmp</code>）</li>
<li><strong>对启动速度敏感</strong>的临时任务</li>
</ol>
<h3 id="🚀-必须用PowerShell的场景"><a href="#🚀-必须用PowerShell的场景" class="headerlink" title="🚀 必须用PowerShell的场景"></a>🚀 <strong>必须用PowerShell的场景</strong></h3><ol>
<li><strong>自动化运维任务</strong>（AD用户批量创建、Azure资源管理）</li>
<li><strong>复杂数据处理</strong>（JSON&#x2F;XML解析、报表生成）</li>
<li><strong>跨平台脚本开发</strong>（Windows&#x2F;Linux&#x2F;macOS兼容）</li>
<li><strong>需要可视化调试</strong>的脚本（VSCode集成调试）</li>
</ol>
<blockquote>
<p><strong>行业数据</strong>：2025年微软统计显示，PowerShell在Windows Server中的使用率已达**82%**，远超CMD的18%。</p>
</blockquote>
<h2 id="五、隐藏技巧：高手这样玩转双终端"><a href="#五、隐藏技巧：高手这样玩转双终端" class="headerlink" title="五、隐藏技巧：高手这样玩转双终端"></a>五、隐藏技巧：高手这样玩转双终端</h2><h3 id="1-在PowerShell中无缝使用CMD命令"><a href="#1-在PowerShell中无缝使用CMD命令" class="headerlink" title="1. 在PowerShell中无缝使用CMD命令"></a>1. <strong>在PowerShell中无缝使用CMD命令</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接运行CMD命令（如ipconfig）</span></span><br><span class="line">cmd.exe /c ipconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时切换至CMD环境（输入exit返回）</span></span><br><span class="line">cmd</span><br></pre></td></tr></table></figure>

<h3 id="2-别名转换表（CMD-→-PowerShell）"><a href="#2-别名转换表（CMD-→-PowerShell）" class="headerlink" title="2. 别名转换表（CMD → PowerShell）"></a>2. <strong>别名转换表（CMD → PowerShell）</strong></h3><table>
<thead>
<tr>
<th>CMD命令</th>
<th>PowerShell等效</th>
<th>实际调用</th>
</tr>
</thead>
<tbody><tr>
<td><code>dir</code></td>
<td><code>Get-ChildItem</code></td>
<td>列出目录内容</td>
</tr>
<tr>
<td><code>copy</code></td>
<td><code>Copy-Item</code></td>
<td>复制文件</td>
</tr>
<tr>
<td><code>tasklist</code></td>
<td><code>Get-Process</code></td>
<td>查看进程</td>
</tr>
<tr>
<td><code>findstr</code></td>
<td><code>Select-String</code></td>
<td>文本搜索</td>
</tr>
<tr>
<td><code>ping</code></td>
<td><code>Test-NetConnection</code></td>
<td>网络测试（更强大！）</td>
</tr>
</tbody></table>
<h3 id="3-性能优化技巧"><a href="#3-性能优化技巧" class="headerlink" title="3. 性能优化技巧"></a>3. <strong>性能优化技巧</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理百万级文件时加速（限制返回数量）</span></span><br><span class="line"><span class="built_in">Get-ChildItem</span> <span class="literal">-Recurse</span> | <span class="built_in">Select-Object</span> <span class="literal">-First</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行执行提升效率（PowerShell 7.4+）</span></span><br><span class="line"><span class="number">1</span>..<span class="number">10</span> | <span class="built_in">ForEach-Object</span> <span class="literal">-Parallel</span> &#123; </span><br><span class="line">    <span class="built_in">Invoke-RestMethod</span> <span class="string">&quot;http://api/?id=<span class="variable">$_</span>&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、未来展望：命令行的进化之路"><a href="#六、未来展望：命令行的进化之路" class="headerlink" title="六、未来展望：命令行的进化之路"></a>六、未来展望：命令行的进化之路</h2><p>PowerShell正朝着<strong>智能化</strong>和<strong>低代码化</strong>方向发展：</p>
<ul>
<li><strong>AI集成</strong>：通过<code>PSPredict</code>模块实现命令自动补全（2025新特性）</li>
<li><strong>可视化编排</strong>：图形化工作流设计器生成PowerShell脚本</li>
<li><strong>云原生</strong>：直接管理Kubernetes集群的<code>Kubectl</code>扩展模块</li>
</ul>
<p>而CMD作为<strong>轻量化工具</strong>，仍将在以下领域长期存在：</p>
<ul>
<li><strong>嵌入式系统维护</strong></li>
<li><strong>超快速命令执行</strong></li>
<li><strong>传统工业控制环境</strong></li>
</ul>
<h2 id="结语：选择你的武器"><a href="#结语：选择你的武器" class="headerlink" title="结语：选择你的武器"></a>结语：选择你的武器</h2><p>当你在深夜面对服务器故障时——<br>✳ <strong>CMD</strong>像一把<strong>瑞士军刀</strong>：简单直接，随手可用<br>✳ <strong>PowerShell</strong>则是<strong>智能工具箱</strong>：精密强大，化繁为简  </p>
<blockquote>
<p>“用<code>dir</code>查看世界，用<code>Get-ChildItem</code>改变世界” —— 一位匿名系统管理员的感悟</p>
</blockquote>
<p>无论选择哪个，记住：<strong>真正的力量不在于工具本身，而在于掌握工具的人</strong>。现在就开始你的命令行探索之旅吧！</p>
<hr>
<p><strong>参考资料</strong>：<br>[1] <a href="https://www.cnblogs.com/suv789/p/18663167">PowerShell与CMD的多命令执行对比</a><br>[2] <a href="https://blog.csdn.net/qq_49443542/article/details/143979008">CMD与PowerShell深度解析</a><br>[3] <a href="https://blog.csdn.net/myec_lipse/article/details/135531352">Windows下cmd和PowerShell的区别</a><br>[4] <a href="https://wenku.csdn.net/answer/54o7xidqag">PowerShell与CMD优缺点对比</a><br>[5] <a href="http://www.skcircle.com/?id=2335">PowerShell和CMD的区别</a><br>[6] <a href="https://blog.csdn.net/qq_21422587/article/details/147917229">PowerShell和CMD的九大差异实录</a><br>[7] <a href="https://blog.csdn.net/binbinaijishu88/article/details/147591505">PowerShell与CMD的相爱相杀史</a></p>
]]></content>
      <categories>
        <category>PowerShell</category>
        <category>CMD</category>
      </categories>
      <tags>
        <tag>PowerShell</tag>
        <tag>CMD</tag>
      </tags>
  </entry>
  <entry>
    <title>自媒体必备！如何用python实现下载bilibili的视频并解析为文本？</title>
    <url>/post/4a1b603.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>技巧分享</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows平台Hexo部署终极解决方案：彻底解决“Error: Spawn failed”与代理冲突问题</title>
    <url>/post/cfff3223.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>当技术热情遇上部署报错，这份避坑指南为你点亮绿灯</p>
</blockquote>
<h2 id="一、问题根源：为什么Windows上开启Clash后Hexo部署崩溃？"><a href="#一、问题根源：为什么Windows上开启Clash后Hexo部署崩溃？" class="headerlink" title="一、问题根源：为什么Windows上开启Clash后Hexo部署崩溃？"></a>一、问题根源：为什么Windows上开启Clash后Hexo部署崩溃？</h2><p><strong><code>Error: Spawn failed</code></strong> 是Hexo开发者最常见的噩梦之一，尤其在Windows平台开启Clash代理后更为频发。结合报错信息<code>fatal: in unpopulated submodule &#39;.deploy_git&#39;</code>，根本原因可归结为三点：</p>
<ol>
<li><strong>Git子模块状态异常</strong><br><code>.deploy_git</code>目录作为Hexo的本地Git仓库，<strong>状态与远程仓库不同步</strong>或<strong>被代理中断操作</strong>导致损坏。</li>
<li><strong>代理配置冲突</strong><br>Clash等代理工具若未正确配置，会<strong>阻断Git的SSH&#x2F;HTTPS连接</strong>，引发认证失败或数据传输中断。</li>
<li><strong>环境配置陷阱</strong>  <ul>
<li>行尾符转换冲突（<code>CRLF/LF</code>）</li>
<li>Node.js或Git路径未加入系统环境变量</li>
<li>部署协议错误（使用HTTPS而非SSH）</li>
</ul>
</li>
</ol>
<hr>
<h2 id="二、Windows专属解决方案：分步操作指南"><a href="#二、Windows专属解决方案：分步操作指南" class="headerlink" title="二、Windows专属解决方案：分步操作指南"></a>二、Windows专属解决方案：分步操作指南</h2><h3 id="✅-第一步：紧急修复Git子模块状态"><a href="#✅-第一步：紧急修复Git子模块状态" class="headerlink" title="✅ 第一步：紧急修复Git子模块状态"></a>✅ 第一步：紧急修复Git子模块状态</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入Hexo项目根目录</span></span><br><span class="line"><span class="built_in">cd</span> C:\your\hexo\path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除损坏的部署目录</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span> <span class="literal">-Force</span> .deploy_git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭行尾符自动转换（关键！）</span></span><br><span class="line">git config <span class="literal">--global</span> core.autocrlf false</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置Git缓存</span></span><br><span class="line">git <span class="built_in">rm</span> <span class="literal">--cached</span> <span class="literal">-r</span> .</span><br><span class="line">git reset <span class="literal">--hard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>原理</strong>：Windows的CRLF换行符与Linux的LF冲突，<code>core.autocrlf false</code>彻底避免此问题。</p>
</blockquote>
<h3 id="⚡-第二步：解决Clash代理冲突（关键配置）"><a href="#⚡-第二步：解决Clash代理冲突（关键配置）" class="headerlink" title="⚡ 第二步：解决Clash代理冲突（关键配置）"></a>⚡ 第二步：解决Clash代理冲突（关键配置）</h3><ol>
<li><p><strong>修改Clash监听范围</strong>  </p>
<ul>
<li>打开Clash → 设置 → <strong>开启<code>Allow LAN</code></strong> → 监听地址改为 **<code>0.0.0.0</code>**（默认为127.0.0.1）  </li>
<li>重启Clash并验证：<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">netstat -ano | <span class="built_in">findstr</span> &quot;<span class="number">7890</span>&quot;</span><br><span class="line"># 应返回 <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>为Git配置代理环境变量</strong><br>在Hexo目录执行：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7890</span></span><br><span class="line"><span class="built_in">set</span> https_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7890</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若需永久生效，添加至系统环境变量。</p>
</blockquote>
</li>
<li><p><strong>强制Git走SSH协议（绕过代理限制）</strong><br>修改<code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yourname/repo.git</span>  <span class="comment"># 必须SSH格式！</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>SSH比HTTPS更稳定</strong>，尤其在高延迟网络环境下。</p>
</blockquote>
</li>
</ol>
<h3 id="🔧-第三步：环境验证与修复"><a href="#🔧-第三步：环境验证与修复" class="headerlink" title="🔧 第三步：环境验证与修复"></a>🔧 第三步：环境验证与修复</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[检查Node.js] --&gt; B[验证 node -v ≥12.x]</span><br><span class="line">    A --&gt; C[检查 where node 路径正确]</span><br><span class="line">    D[检查Git] --&gt; E[验证 git --version]</span><br><span class="line">    D --&gt; F[确认 where git 包含系统PATH]</span><br><span class="line">    G[依赖重置] --&gt; H[npm cache clean --force]</span><br><span class="line">    G --&gt; I[删除 node_modules 重装]</span><br></pre></td></tr></table></figure>

<h3 id="🛠️-第四步：终极暴力解法"><a href="#🛠️-第四步：终极暴力解法" class="headerlink" title="🛠️ 第四步：终极暴力解法"></a>🛠️ 第四步：终极暴力解法</h3><p>若上述步骤无效：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有生成文件</span></span><br><span class="line"><span class="built_in">Remove-Item</span> <span class="literal">-Recurse</span> <span class="literal">-Force</span> .deploy_git, public</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送（慎用！）</span></span><br><span class="line"><span class="built_in">cd</span> .deploy_git</span><br><span class="line">git push <span class="operator">-f</span> origin main</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、避坑指南：Windows环境特殊注意事项"><a href="#三、避坑指南：Windows环境特殊注意事项" class="headerlink" title="三、避坑指南：Windows环境特殊注意事项"></a>三、避坑指南：Windows环境特殊注意事项</h2><h3 id="⚠️-代理配置三大陷阱"><a href="#⚠️-代理配置三大陷阱" class="headerlink" title="⚠️ 代理配置三大陷阱"></a>⚠️ 代理配置三大陷阱</h3><table>
<thead>
<tr>
<th>陷阱现象</th>
<th>解决方案</th>
<th>引用</th>
</tr>
</thead>
<tbody><tr>
<td><code>Permission denied (publickey)</code></td>
<td>重新生成SSH密钥并添加到GitHub</td>
<td></td>
</tr>
<tr>
<td><code>Could not resolve host</code></td>
<td>在Clash中开启<code>TUN Mode</code>或<code>System Proxy</code></td>
<td></td>
</tr>
<tr>
<td>代理生效但速度极慢</td>
<td>更换Socks5协议：<code>git config --global http.proxy socks5://127.0.0.1:7890</code></td>
<td></td>
</tr>
</tbody></table>
<h3 id="🛡️-系统权限修复命令"><a href="#🛡️-系统权限修复命令" class="headerlink" title="🛡️ 系统权限修复命令"></a>🛡️ 系统权限修复命令</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">:: 修复文件所有权</span><br><span class="line">takeown /f C:\your\hexo\<span class="built_in">path</span> /r /d y</span><br><span class="line"></span><br><span class="line">:: 重置目录权限</span><br><span class="line">icacls C:\your\hexo\<span class="built_in">path</span> /reset /t</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、预防措施：打造稳定的Windows部署环境"><a href="#四、预防措施：打造稳定的Windows部署环境" class="headerlink" title="四、预防措施：打造稳定的Windows部署环境"></a>四、预防措施：打造稳定的Windows部署环境</h2><h3 id="🔒-环境加固配置表"><a href="#🔒-环境加固配置表" class="headerlink" title="🔒 环境加固配置表"></a>🔒 环境加固配置表</h3><table>
<thead>
<tr>
<th>配置项</th>
<th>推荐值</th>
<th>生效命令</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Node.js安装</strong></td>
<td>勾选<code>Add to PATH</code></td>
<td>安装时必选</td>
</tr>
<tr>
<td><strong>Git换行符</strong></td>
<td><code>core.autocrlf=false</code></td>
<td><code>git config --global core.autocrlf false</code></td>
</tr>
<tr>
<td><strong>部署协议</strong></td>
<td>SSH优先</td>
<td><code>repo: git@github.com:xxx</code></td>
</tr>
<tr>
<td><strong>代理监听</strong></td>
<td>0.0.0.0</td>
<td>Clash设置中修改</td>
</tr>
</tbody></table>
<h3 id="🔄-自动化部署脚本（deploy-ps1）"><a href="#🔄-自动化部署脚本（deploy-ps1）" class="headerlink" title="🔄 自动化部署脚本（deploy.ps1）"></a>🔄 自动化部署脚本（<code>deploy.ps1</code>）</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预检代理状态</span></span><br><span class="line"><span class="keyword">if</span> (<span class="operator">-not</span> (<span class="built_in">Test-NetConnection</span> github.com <span class="literal">-Port</span> <span class="number">22</span>).TcpTestSucceeded) &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;❌ SSH端口被阻断，正在启用代理...&quot;</span></span><br><span class="line">    <span class="variable">$env:http_proxy</span>=<span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行部署</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果验证</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$LASTEXITCODE</span> <span class="operator">-eq</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;✅ 部署成功！&quot;</span> <span class="literal">-ForegroundColor</span> Green</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">Write-Host</span> <span class="string">&quot;❌ 部署失败！检查 .deploy_git 状态&quot;</span> <span class="literal">-ForegroundColor</span> Red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、总结：Windows部署黄金法则"><a href="#五、总结：Windows部署黄金法则" class="headerlink" title="五、总结：Windows部署黄金法则"></a>五、总结：Windows部署黄金法则</h2><ol>
<li><strong>环境隔离原则</strong><br>开发环境路径避免中文和空格（如<code>C:\Dev\hexo</code>优于<code>C:\用户\桌面\博客</code>）</li>
<li><strong>代理透明化</strong><br>Clash需开<code>Allow LAN</code> + <strong>监听0.0.0.0</strong> + <strong>Git显式声明代理</strong></li>
<li><strong>协议优选级</strong><br><strong>SSH &gt; HTTPS</strong>，GitHub已全面支持SSH免密推送</li>
<li><strong>子模块监控</strong><br>每次部署前检查<code>.deploy_git/.git/logs/HEAD</code>日志是否异常</li>
</ol>
<blockquote>
<p>“在Windows上玩转Hexo，不是与系统对抗，而是学会与它共舞”——一位修复了37次Spawn failed的开发者的觉悟</p>
</blockquote>
<p>通过以上方案，**&gt;99%的Spawn failed错误可被根治**。如仍遇问题，建议在WSL2中运行Hexo获得Linux原生兼容性。</p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>Clash</category>
      </categories>
      <tags>
        <tag>Hexo部署故障</tag>
        <tag>Clash代理配置</tag>
        <tag>Spawn failed</tag>
      </tags>
  </entry>
  <entry>
    <title>你的Git还在显示“&#92;347&#92;27&#92;217”吗？这份避坑指南快收好！</title>
    <url>/post/af22aac6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="🔧-一、核心配置修复（优先操作）"><a href="#🔧-一、核心配置修复（优先操作）" class="headerlink" title="🔧 一、核心配置修复（优先操作）"></a>🔧 <strong>一、核心配置修复（优先操作）</strong></h3><ol>
<li><p><strong>禁用 Git 路径转义</strong><br>执行以下命令关闭 Git 对非 ASCII 字符的自动转义：  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global core.quotepath false # 大部分情况配置这个就好了</span><br></pre></td></tr></table></figure>

<p>✅ <strong>效果</strong>：<code>git status</code> 中的中文路径将直接显示原始字符而非八进制编码。</p>
</li>
<li><p><strong>设置环境变量强制 UTF-8 编码</strong><br>临时生效方案（当前 CMD 窗口）：  </p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> LESSCHARSET=utf-<span class="number">8</span> # 配置UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>

<p>永久生效方案（需管理员权限）：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">Environment</span>]::SetEnvironmentVariable(<span class="string">&quot;LESSCHARSET&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="string">&quot;Machine&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>✅ <strong>效果</strong>：解决 <code>git log</code>、<code>git status</code> 等命令的输出乱码。</p>
</li>
</ol>
<hr>
<h3 id="⚙️-二、系统级调整（解决深层兼容问题）"><a href="#⚙️-二、系统级调整（解决深层兼容问题）" class="headerlink" title="⚙️ 二、系统级调整（解决深层兼容问题）"></a>⚙️ <strong>二、系统级调整（解决深层兼容问题）</strong></h3><h4 id="1-修改-CMD-控制台编码为-UTF-8"><a href="#1-修改-CMD-控制台编码为-UTF-8" class="headerlink" title="1. 修改 CMD 控制台编码为 UTF-8"></a><strong>1. 修改 CMD 控制台编码为 UTF-8</strong></h4><ul>
<li><strong>临时生效</strong>：  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span>  # 切换当前会话编码为 UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></li>
<li><strong>永久生效</strong>（需修改注册表）：  <ol>
<li>按 <code>Win+R</code> 输入 <code>regedit</code> 打开注册表；  </li>
<li>定位路径：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Command Processor</code>；  </li>
<li>新建字符串值 <code>Autorun</code>，数据设为 <code>@chcp 65001&gt;nul</code>。</li>
</ol>
</li>
</ul>
<h4 id="2-启用系统全局-UTF-8-支持"><a href="#2-启用系统全局-UTF-8-支持" class="headerlink" title="2. 启用系统全局 UTF-8 支持"></a><strong>2. 启用系统全局 UTF-8 支持</strong></h4><ol>
<li>控制面板 → 时钟和区域 → 区域 → 管理 → 更改系统区域设置；  </li>
<li>勾选 <strong>Beta 版：使用 Unicode UTF-8 提供全球语言支持</strong>；  </li>
<li>重启电脑生效。<br>  ⚠️ <strong>注意</strong>：此操作可能影响部分老旧程序，建议评估后使用。</li>
</ol>
<hr>
<h3 id="🔍-三、辅助排查与优化"><a href="#🔍-三、辅助排查与优化" class="headerlink" title="🔍 三、辅助排查与优化"></a>🔍 <strong>三、辅助排查与优化</strong></h3><ol>
<li><strong>检查字体兼容性</strong>  <ul>
<li>右键 CMD 标题栏 → 属性 → 字体 → 选择支持中文的字体（如 <strong>微软雅黑</strong> 或 <strong>Consolas</strong>）。</li>
</ul>
</li>
<li><strong>验证 Git 全局编码设置</strong><br>执行以下命令确保输出均为 <code>utf-8</code>：  <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global --get i18n.commitencoding  # 应为 utf-<span class="number">8</span></span><br><span class="line">git config --global --get i18n.logoutputencoding  # 应为 utf-<span class="number">8</span></span><br></pre></td></tr></table></figure></li>
<li><strong>改用 Git Bash 替代 CMD</strong><br>Git Bash 原生支持 UTF-8，操作步骤：  <ul>
<li>右键 Git Bash 标题栏 → Options → Text → Locale 选 <code>zh_CN</code>，Character set 选 <code>UTF-8</code>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="💎-四、效果验证与总结"><a href="#💎-四、效果验证与总结" class="headerlink" title="💎 四、效果验证与总结"></a>💎 <strong>四、效果验证与总结</strong></h3><table>
<thead>
<tr>
<th><strong>操作步骤</strong></th>
<th><strong>验证命令</strong></th>
<th><strong>预期效果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>禁用 <code>core.quotepath</code></td>
<td><code>git status</code></td>
<td>中文路径正常显示</td>
</tr>
<tr>
<td>设置 <code>LESSCHARSET=utf-8</code></td>
<td><code>git log</code></td>
<td>中文提交信息无乱码</td>
</tr>
<tr>
<td>切换 CMD 编码 (<code>chcp 65001</code>)</td>
<td><code>dir</code></td>
<td>中文文件名正常显示</td>
</tr>
</tbody></table>
<p>✅ <strong>总结</strong>：  </p>
<blockquote>
<p>90% 的乱码问题通过 <strong>核心配置修复</strong> 即可解决。若仍存在异常，按顺序执行 <strong>系统级调整</strong> 和 <strong>辅助排查</strong> 步骤。优先推荐永久生效方案，避免重复操作。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术指南</category>
      </categories>
      <tags>
        <tag>Git故障修复</tag>
        <tag>开发环境配置</tag>
        <tag>中文编码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于【hexo+butterfly】搭建博客的改造计划</title>
    <url>/post/exp-hexo-butterfly.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>为什么我要用butterfly作为hexo的主题？而不是程序员搭博客普遍采用的Next？</p>
<p>因为，butterfly是数码宝贝第1部的主题曲啊！</p>
</blockquote>
<p>一开始搭建博客的时候有些本末倒置了，过度关心怎么搭的更好，及怎么改造主题，怎么做SEO等等等等。刹那间幡然醒悟，我只是为了搭个博客做记录，要用什么功能，可以边搭边补充。</p>
<p>不过也难免，尝试新东西的时候总会迷路一阵子的。</p>
<p>此篇博客记录我搭建博客时，遇到的或者花了一定时间的问题或者说需求。</p>
<h2 id="butterfly主题添加当前访客信息"><a href="#butterfly主题添加当前访客信息" class="headerlink" title="butterfly主题添加当前访客信息"></a>butterfly主题添加当前访客信息</h2><blockquote>
<p>阅读并跟着操作：<a href="https://cloud.tencent.com/developer/article/1945527">Hexo添加当前访客信息</a></p>
</blockquote>
<p>问题：<a href="https://pv.sohu.com/cityjson?ie=utf-8">https://pv.sohu.com/cityjson?ie=utf-8</a> 此链接失效了</p>
<blockquote>
<p>借用：<a href="https://www.oldboard.tech/2023/02/18/%E8%8E%B7%E5%8F%96ip%E5%9C%B0%E5%9D%80.html">获取IP地址及归属地的免费接口</a> &#x2F; 截止2024.7.13可用，失效了请找新的</p>
<p>我以：<a href="https://myip.ipip.net/json">https://myip.ipip.net/json</a> 这个接口为例</p>
</blockquote>
<p>其实只改造：<code>themes/butterfly/source/js/ip_content.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前IP地址和浏览器标识</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBrowserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> agent = navigator.<span class="property">userAgent</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> regStr_ie = <span class="regexp">/msie [\d.]+;/gi</span>;</span><br><span class="line">    <span class="keyword">var</span> regStr_ff = <span class="regexp">/firefox\/[\d.]+/gi</span></span><br><span class="line">    <span class="keyword">var</span> regStr_chrome = <span class="regexp">/chrome\/[\d.]+/gi</span>;</span><br><span class="line">    <span class="keyword">var</span> regStr_saf = <span class="regexp">/safari\/[\d.]+/gi</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IE</span></span><br><span class="line">    <span class="keyword">if</span> (agent.<span class="title function_">indexOf</span>(<span class="string">&quot;msie&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.<span class="title function_">match</span>(regStr_ie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//firefox</span></span><br><span class="line">    <span class="keyword">if</span> (agent.<span class="title function_">indexOf</span>(<span class="string">&quot;firefox&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.<span class="title function_">match</span>(regStr_ff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chrome</span></span><br><span class="line">    <span class="keyword">if</span> (agent.<span class="title function_">indexOf</span>(<span class="string">&quot;chrome&quot;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.<span class="title function_">match</span>(regStr_chrome);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Safari</span></span><br><span class="line">    <span class="keyword">if</span> (agent.<span class="title function_">indexOf</span>(<span class="string">&quot;safari&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; agent.<span class="title function_">indexOf</span>(<span class="string">&quot;chrome&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> agent.<span class="title function_">match</span>(regStr_saf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ip_content.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保代码在页面加载时可以直接执行，但需要确保 ip_content 元素在这段代码执行时已经存在于 DOM 中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchIPInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://myip.ipip.net/json&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data.<span class="property">ret</span> === <span class="string">&#x27;ok&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> ip = data.<span class="property">data</span>.<span class="property">ip</span>;</span><br><span class="line">            <span class="keyword">const</span> locationArray = data.<span class="property">data</span>.<span class="property">location</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 过滤空值并去掉最后一个值和最后一个逗号</span></span><br><span class="line">            <span class="keyword">const</span> filteredLocation = locationArray.<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">            <span class="keyword">const</span> location = filteredLocation.<span class="property">length</span> &gt; <span class="number">1</span> ? filteredLocation.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>) : filteredLocation[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印 IP 和位置信息到控制台</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`IP: <span class="subst">$&#123;ip&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`位置: <span class="subst">$&#123;location&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 插入到指定的 HTML 元素中</span></span><br><span class="line">            <span class="keyword">const</span> ipContentElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.ip_content&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ipContentElement) &#123;</span><br><span class="line">                ipContentElement.<span class="property">innerHTML</span> = <span class="string">`欢迎来自 &lt;span class=&quot;p&quot;&gt;<span class="subst">$&#123;location&#125;</span>&lt;/span&gt; 的小伙伴&lt;br&gt;访问IP为： &lt;span class=&#x27;p&#x27;&gt;<span class="subst">$&#123;ip&#125;</span>&lt;/span&gt;&lt;br&gt;浏览器版本：&lt;span class=&#x27;p&#x27;&gt;<span class="subst">$&#123;navigator.userAgent&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;找不到类名为 ip_content 的元素&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败或返回数据格式错误&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生网络错误:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数获取 IP 信息</span></span><br><span class="line"><span class="title function_">fetchIPInfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// var ip_content = document.querySelector(&quot;.ip_content&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if (ip_content != null &amp;&amp; typeof (returnCitySN) != undefined) &#123;</span></span><br><span class="line"><span class="comment">//     ip_content.innerHTML = &#x27;欢迎来自 &lt;span class=&quot;p&quot;&gt;&#x27; </span></span><br><span class="line"><span class="comment">//     + returnCitySN[&quot;cname&quot;] + &quot;&lt;/span&gt; 的小伙伴&lt;br&gt;&quot; </span></span><br><span class="line"><span class="comment">//     + &quot;访问IP为： &lt;span class=&#x27;p&#x27;&gt;&quot; + returnCitySN[&quot;cip&quot;] </span></span><br><span class="line"><span class="comment">//     + &quot;&lt;/span&gt;&lt;br&gt;浏览器版本：&lt;span class=&#x27;p&#x27;&gt;&quot; + getBrowserInfo() + &#x27;&lt;/span&gt;&#x27;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>以上代码通过ChatGPT就可以生成 😕</p>
<p>询问方式：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">帮我写一段js代码，发起http请求并解析，请求地址是 https://myip.ipip.net/json，请求结果是：</span><br><span class="line">&#123;&quot;ret&quot;:&quot;ok&quot;,&quot;data&quot;:&#123;&quot;ip&quot;:&quot;112.10.247.224&quot;,&quot;location&quot;:[&quot;中国&quot;,&quot;浙江&quot;,&quot;杭州&quot;,&quot;&quot;,&quot;移动&quot;]&#125;&#125;</span><br><span class="line">要求1:该段代码可以以 &lt;script src=&quot;/js/ip_content.js&quot;&gt;&lt;/script&gt; 的格式插入；</span><br><span class="line">要求2:将请求结果插入到html布局中，布局代码是：</span><br><span class="line">&lt;div class=&quot;ip_content&quot;&gt;欢迎来自 &lt;span class=&quot;p&quot;&gt;未知区域&lt;/span&gt; 的小伙伴&lt;br&gt;访问IP为： &lt;span class=&quot;p&quot;&gt;未知IP&lt;/span&gt;&lt;br&gt;浏览器版本：&lt;span class=&quot;p&quot;&gt;未知浏览器&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>





<h2 id="butterfly的打赏图片和微信、支付宝大小不兼容"><a href="#butterfly的打赏图片和微信、支付宝大小不兼容" class="headerlink" title="butterfly的打赏图片和微信、支付宝大小不兼容"></a>butterfly的打赏图片和微信、支付宝大小不兼容</h2><p>改动：<code>themes/butterfly/source/css/_layout/reward.styl</code> 下<code>.post-reward.reward-main.reward-all.reward-item.img</code> 的 width 为120px，height为180px</p>
<p>思路：全局搜索 <code>reward</code> ，扫一眼就觉得该改这里；</p>
<h2 id="有序列表和无序列表为什么不显示标号？"><a href="#有序列表和无序列表为什么不显示标号？" class="headerlink" title="有序列表和无序列表为什么不显示标号？"></a>有序列表和无序列表为什么不显示标号？</h2><p>bufferfly主题导致</p>
<p>证明：<code>_config.yml</code> 的 <code>theme</code> 不填，可以显示；</p>
<h2 id="不要butterfly首页的图片"><a href="#不要butterfly首页的图片" class="headerlink" title="不要butterfly首页的图片"></a>不要butterfly首页的图片</h2><p>太花哨了，把 <code>_config.butterfly.yml</code> 下的 <code>disable_top_img</code>设置为true</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo的常见姿势</title>
    <url>/post/exp-hexo-base.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><h4 id="如何直接在-posts-的目录下直接新建文章？（不是分类和标签）"><a href="#如何直接在-posts-的目录下直接新建文章？（不是分类和标签）" class="headerlink" title="如何直接在 _posts 的目录下直接新建文章？（不是分类和标签）"></a>如何直接在 <strong>_posts</strong> 的目录下直接新建文章？（不是分类和标签）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new -p 经验/&quot;使用hexo的常见姿势&quot;</span><br></pre></td></tr></table></figure>

<hr>
<p>为什么hexo下的markdown使用<strong>有序列表</strong>和<strong>无序列表</strong>都不显示前面的数字或标记？<br>答：不是hexo的锅，去掉theme配置是可以显示的，很可能是主题的markdown引擎的，例如在butterfly主题的时候，F12调试发现被转成了&lt;p&gt;标签</p>
<h4 id="草稿相关"><a href="#草稿相关" class="headerlink" title="草稿相关"></a>草稿相关</h4><ul>
<li><p>建立文章草稿</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地预览草稿</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo S --draft</span><br></pre></td></tr></table></figure>
</li>
<li><p>草稿转发布</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo P &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称</p>
</li>
<li><p>发布转草稿</p>
<p>只需手动将文章从 <code>source/_posts</code> 目录移动到 <code>source/_drafts</code> 目录即可</p>
</li>
</ul>
<hr>
<h2 id="基础的hexo命令"><a href="#基础的hexo命令" class="headerlink" title="基础的hexo命令"></a>基础的hexo命令</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo g (生成)</span><br><span class="line">hexo s/server (开始本地预览服务)</span><br><span class="line">hexo d/deploy (发布上传)</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d (组合生成发布命令)</span><br><span class="line">hexo n/new &quot;postName&quot; (新建文章)</span><br><span class="line">hexo new page &quot;pageName&quot; (新建页面)</span><br><span class="line">hexo g/generate （生成静态页面至public目录）</span><br><span class="line">hexo help (查看帮助)</span><br><span class="line">hexo version (查看Hexo版本)</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>文字引用</p>
</blockquote>
<p><em>斜体</em><br><strong>粗体</strong><br><em><strong>加粗斜体</strong></em><br><del>删除线</del></p>
<p><code>行内代码</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多行代码</span><br><span class="line">多行代码</span><br><span class="line">​```</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方法一：---</span><br><span class="line"></span><br><span class="line">方法二：+++</span><br><span class="line"></span><br><span class="line">方法三：***</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">无序列表使用 * 或 + 或 - 标识</span><br><span class="line">有序列表使用数字加 . 标识，例如：1.</span><br><span class="line">注意：标识和文字之间要有一个空格</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">hexo文章不显示序号？设置：post_asset_folder为false</span><br><span class="line"></span><br><span class="line">- 无序列表1</span><br><span class="line">- 无序列表2</span><br><span class="line">- 无序列表3</span><br><span class="line"></span><br><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line">3. 有序列表3</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 插入图片</span><br><span class="line">引用图片: </span><br><span class="line">``` markdown</span><br><span class="line">&#123;% asset_img xxx.png 图片描述 %&#125;</span><br></pre></td></tr></table></figure>
<img src="/post/exp-hexo-base/test.png" class="" title="图片引用方法一">

<p><a href="test.png" title="图片引用方法二">test</a></p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>一键永久激活Windows 10/11及Office！PowerShell脚本激活指南</title>
    <url>/post/b2e34fdd.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>导语</strong><br>你是否还在为Windows系统或Office的激活问题烦恼？本文将分享一种通过PowerShell脚本快速激活Windows 10&#x2F;11和Office的方法，操作简单且支持永久激活，无需复杂工具。文末附注意事项，建议仔细阅读！</p>
<hr>
<h3 id="一、激活原理简介"><a href="#一、激活原理简介" class="headerlink" title="一、激活原理简介"></a><strong>一、激活原理简介</strong></h3><p>通过开源脚本工具（如HWID和Ohook），可以绕过系统激活验证，实现Windows或Office的永久激活：  </p>
<ul>
<li><strong>HWID（数字许可证激活）</strong>：适用于Windows系统，需联网验证，绑定硬件ID实现永久激活。  </li>
<li><strong>Ohook（离线激活）</strong>：适用于Office软件，无需联网，直接修改本地验证机制。</li>
</ul>
<hr>
<h3 id="二、激活前准备"><a href="#二、激活前准备" class="headerlink" title="二、激活前准备"></a><strong>二、激活前准备</strong></h3><ol>
<li><strong>系统要求</strong>：Windows 8及以上版本（支持Win10&#x2F;Win11）。  </li>
<li><strong>权限要求</strong>：以<strong>管理员身份</strong>运行PowerShell（否则可能失败）。  </li>
<li><strong>关闭安全软件</strong>：部分杀毒软件可能拦截脚本，建议临时禁用。</li>
</ol>
<hr>
<h3 id="三、激活步骤详解"><a href="#三、激活步骤详解" class="headerlink" title="三、激活步骤详解"></a><strong>三、激活步骤详解</strong></h3><h4 id="步骤1：以管理员身份运行PowerShell"><a href="#步骤1：以管理员身份运行PowerShell" class="headerlink" title="步骤1：以管理员身份运行PowerShell"></a><strong>步骤1：以管理员身份运行PowerShell</strong></h4><ul>
<li>点击任务栏搜索框，输入“PowerShell”，右键选择“以管理员身份运行”。  </li>
<li>若弹出权限提示，选择“是”允许操作。</li>
</ul>
<img src="/post/b2e34fdd/%E7%AE%A1%E7%90%86%E5%91%98%E6%A8%A1%E5%BC%8F%E6%89%93%E5%BC%80powershell.png" class="" title="管理员模式打开powershell">

<h4 id="步骤2：输入激活脚本"><a href="#步骤2：输入激活脚本" class="headerlink" title="步骤2：输入激活脚本"></a><strong>步骤2：输入激活脚本</strong></h4><p>复制以下命令，粘贴到PowerShell窗口，按回车执行：  </p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br><span class="line">```  </span><br><span class="line">脚本会自动下载并启动激活工具。  </span><br><span class="line"></span><br><span class="line"><span class="comment">#### **步骤3：选择激活模式**  </span></span><br><span class="line">脚本运行后，会显示以下选项：  </span><br></pre></td></tr></table></figure>
<p>[1] HWID - 激活Windows（需联网）<br>[2] Ohook - 激活Office（离线可用）  </p>
<pre><code>- **激活Windows系统**：输入数字`1`，等待自动联网验证（约1-3分钟）。  
- **激活Office软件**：输入数字`2`，直接离线激活。  

#### **步骤4：确认激活成功**  
- Windows激活成功后，会显示“Permanently Activated”字样。  
- 打开“设置” → “系统” → “激活”，确认状态为“已激活”。  

---

### **四、注意事项**  
1. **网络要求**：激活Windows时需保持网络畅通，否则可能失败。  
2. **系统兼容性**：Office激活仅支持2016及以上版本（如Office 2021、365）。  
3. **安全风险**：第三方脚本存在潜在风险，建议在虚拟机或备用设备操作。  
4. **正版支持**：本文仅供技术研究，长期使用请支持正版授权。  

---

### **五、常见问题**  
**Q1：激活后系统更新会失效吗？**  
HWID激活为永久数字许可证，重装系统或更新均不影响。  

**Q2：脚本报错“无法执行”怎么办？**  
- 检查是否以管理员身份运行PowerShell。  
- 输入命令`Set-ExecutionPolicy RemoteSigned`启用脚本权限。  

---

**结语**  
通过PowerShell脚本激活Windows和Office，省去了寻找KMS工具的繁琐流程。但需注意，任何非官方激活方式均存在不确定性，建议优先通过正规渠道获取授权。如果你觉得本文有用，欢迎转发分享！  

**标签**：`Windows激活` `Office激活` `PowerShell脚本` `系统优化`
</code></pre>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>Windows激活</tag>
      </tags>
  </entry>
  <entry>
    <title>跨平台 GitHub SSH 配置指南</title>
    <url>/post/d07e4f89.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="跨平台-GitHub-SSH-配置指南"><a href="#跨平台-GitHub-SSH-配置指南" class="headerlink" title="跨平台 GitHub SSH 配置指南"></a>跨平台 GitHub SSH 配置指南</h1><h3 id="一、检查现有-SSH-密钥"><a href="#一、检查现有-SSH-密钥" class="headerlink" title="一、检查现有 SSH 密钥"></a><strong>一、检查现有 SSH 密钥</strong></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -al ~/.ssh  
</code></pre>
<p>若存在 <code>id_ed25519</code> 或 <code>id_rsa</code> 文件（如 <code>id_rsa.pub</code>），可直接跳到<a href="#%E4%B8%89%E6%B7%BB%E5%8A%A0%E5%85%AC%E9%92%A5%E5%88%B0-github">添加公钥步骤</a>。  </p>
<hr>
<h3 id="二、生成-SSH-密钥"><a href="#二、生成-SSH-密钥" class="headerlink" title="二、生成 SSH 密钥"></a><strong>二、生成 SSH 密钥</strong></h3><h4 id="1-通用命令（推荐-Ed25519-算法）"><a href="#1-通用命令（推荐-Ed25519-算法）" class="headerlink" title="1. 通用命令（推荐 Ed25519 算法）"></a><strong>1. 通用命令（推荐 Ed25519 算法）</strong></h4><pre class=" language-bash"><code class="language-bash">ssh-keygen -t ed25519 -C <span class="token string">"your_email@example.com"</span>  
</code></pre>
<ul>
<li><strong>参数说明</strong>  <ul>
<li><code>-t ed25519</code>：更安全的新算法（2025 年主流推荐）。  </li>
<li><code>-C</code>：注释，建议用 GitHub 注册邮箱。</li>
</ul>
</li>
<li><strong>操作提示</strong>  <ul>
<li>保存路径：直接回车（默认 <code>~/.ssh/id_ed25519</code>）。  </li>
<li>密码设置：可选（增强安全性），回车跳过则无密码。</li>
</ul>
</li>
</ul>
<h4 id="2-兼容旧系统（RSA-算法）"><a href="#2-兼容旧系统（RSA-算法）" class="headerlink" title="2. 兼容旧系统（RSA 算法）"></a><strong>2. 兼容旧系统（RSA 算法）</strong></h4><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096 -C <span class="token string">"your_email@example.com"</span>  
</code></pre>
<blockquote>
<p>适用于不支持 Ed25519 的环境（如老版本 Linux）。  </p>
</blockquote>
<hr>
<h3 id="三、添加公钥到-GitHub"><a href="#三、添加公钥到-GitHub" class="headerlink" title="三、添加公钥到 GitHub"></a><strong>三、添加公钥到 GitHub</strong></h3><ol>
<li><p><strong>复制公钥内容</strong>  </p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># macOS/Linux</span>
<span class="token function">cat</span> ~/.ssh/id_ed25519.pub <span class="token operator">|</span> pbcopy  <span class="token comment" spellcheck="true"># macOS</span>
<span class="token function">cat</span> ~/.ssh/id_ed25519.pub <span class="token operator">|</span> xclip -sel clip  <span class="token comment" spellcheck="true"># Linux（需安装 xclip）</span>

<span class="token comment" spellcheck="true"># Windows（Git Bash）</span>
<span class="token function">cat</span> ~/.ssh/id_ed25519.pub <span class="token operator">></span> /dev/clipboard  <span class="token comment" spellcheck="true"># 或手动打开文件复制。</span>
</code></pre>
</li>
<li><p><strong>添加到 GitHub</strong>  </p>
<ul>
<li>登录 GitHub → <strong>Settings</strong> → <strong>SSH and GPG Keys</strong> → <strong>New SSH Key</strong>。  </li>
<li><strong>Title</strong>：设备标识（如 <code>My-MacBook</code>）  </li>
<li><strong>Key</strong>：粘贴复制的公钥内容  </li>
<li>点击 <strong>Add SSH Key</strong>。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、配置-SSH-代理"><a href="#四、配置-SSH-代理" class="headerlink" title="四、配置 SSH 代理"></a><strong>四、配置 SSH 代理</strong></h3><p>加载 SSH 代理（如 ssh-agent）的核心目的是<strong>简化身份认证流程并提升安全性</strong>，尤其在需要频繁使用 SSH 密钥的场景中。</p>
<h4 id="1-启动代理并加载密钥"><a href="#1-启动代理并加载密钥" class="headerlink" title="1. 启动代理并加载密钥"></a><strong>1. 启动代理并加载密钥</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span>"</span>  <span class="token comment" spellcheck="true"># 启动代理（所有系统通用）</span>
</code></pre>
<h4 id="2-添加私钥到代理"><a href="#2-添加私钥到代理" class="headerlink" title="2. 添加私钥到代理"></a><strong>2. 添加私钥到代理</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># macOS（永久加载到钥匙串）</span>
ssh-add --apple-use-keychain ~/.ssh/id_ed25519  

<span class="token comment" spellcheck="true"># Windows/Linux</span>
ssh-add ~/.ssh/id_ed25519  
</code></pre>
<blockquote>
<p><strong>macOS 优化</strong>：在 <code>~/.ssh/config</code> 中添加 <code>UseKeychain yes</code>，避免重复输入密码。  </p>
</blockquote>
<hr>
<h3 id="五、测试-SSH-连接"><a href="#五、测试-SSH-连接" class="headerlink" title="五、测试 SSH 连接"></a><strong>五、测试 SSH 连接</strong></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com  
</code></pre>
<ul>
<li><strong>成功响应</strong>：  <pre class=" language-bash"><code class="language-bash">Hi username<span class="token operator">!</span> You've successfully authenticated<span class="token punctuation">..</span>.  
</code></pre>
</li>
<li><strong>首次连接提示</strong>：输入 <code>yes</code> 信任主机。</li>
</ul>
<hr>
<h3 id="六、配置-Git-使用-SSH"><a href="#六、配置-Git-使用-SSH" class="headerlink" title="六、配置 Git 使用 SSH"></a><strong>六、配置 Git 使用 SSH</strong></h3><h4 id="1-检查仓库远程-URL"><a href="#1-检查仓库远程-URL" class="headerlink" title="1. 检查仓库远程 URL"></a><strong>1. 检查仓库远程 URL</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote -v  
</code></pre>
<p>若显示 <code>https://</code> 开头，需切换为 SSH：  </p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin git@github.com:username/repo.git  
</code></pre>
<h4 id="2-全局设置-Git-身份（必做！）"><a href="#2-全局设置-Git-身份（必做！）" class="headerlink" title="2. 全局设置 Git 身份（必做！）"></a><strong>2. 全局设置 Git 身份（必做！）</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"Your Name"</span>
<span class="token function">git</span> config --global user.email <span class="token string">"your_email@example.com"</span>  
</code></pre>
<blockquote>
<p>此配置与 SSH 密钥独立，用于标识提交者身份。  </p>
</blockquote>
<hr>
<h3 id="七、故障排除"><a href="#七、故障排除" class="headerlink" title="七、故障排除"></a><strong>七、故障排除</strong></h3><h4 id="1-权限问题"><a href="#1-权限问题" class="headerlink" title="1. 权限问题"></a><strong>1. 权限问题</strong></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># macOS/Linux</span>
<span class="token function">chmod</span> 700 ~/.ssh
<span class="token function">chmod</span> 600 ~/.ssh/id_ed25519  

<span class="token comment" spellcheck="true"># Windows（Git Bash）</span>
icacls %USERPROFILE%\.ssh\id_ed25519 /inheritance:r /grant:r <span class="token string">"%USERNAME%"</span>:<span class="token punctuation">(</span>R<span class="token punctuation">)</span>  
</code></pre>
<h4 id="2-连接失败"><a href="#2-连接失败" class="headerlink" title="2. 连接失败"></a><strong>2. 连接失败</strong></h4><ul>
<li>检查公钥是否完整粘贴到 GitHub。  </li>
<li>排查防火墙&#x2F;代理是否阻塞 SSH 端口（22）。  </li>
<li>详细日志：<code>ssh -Tv git@github.com</code>  。</li>
</ul>
<hr>
<h3 id="八、高级技巧：多账号管理"><a href="#八、高级技巧：多账号管理" class="headerlink" title="八、高级技巧：多账号管理"></a><strong>八、高级技巧：多账号管理</strong></h3><ol>
<li><strong>生成第二对密钥</strong>  <pre class=" language-bash"><code class="language-bash">ssh-keygen -t ed25519 -C <span class="token string">"work@email.com"</span> -f ~/.ssh/id_ed25519_work  
</code></pre>
</li>
<li><strong>配置 <code>~/.ssh/config</code></strong>  <pre class=" language-bash"><code class="language-bash">Host github.com-personal  <span class="token comment" spellcheck="true"># 自定义别名</span>
  HostName github.com
  User <span class="token function">git</span>
  IdentityFile ~/.ssh/id_ed25519

Host github.com-work      <span class="token comment" spellcheck="true"># 工作账号</span>
  HostName github.com
  User <span class="token function">git</span>
  IdentityFile ~/.ssh/id_ed25519_work  
</code></pre>
</li>
<li><strong>使用示例</strong>  <pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com-work:company/project.git  <span class="token comment" spellcheck="true"># 指定工作账号克隆</span>
</code></pre>
</li>
</ol>
<hr>
<h3 id="跨平台差异总结"><a href="#跨平台差异总结" class="headerlink" title="跨平台差异总结"></a><strong>跨平台差异总结</strong></h3><table>
<thead>
<tr>
<th><strong>操作</strong></th>
<th>Windows (Git Bash)</th>
<th>macOS&#x2F;Linux</th>
</tr>
</thead>
<tbody><tr>
<td><strong>密钥生成</strong></td>
<td>同左</td>
<td>同左</td>
</tr>
<tr>
<td><strong>代理加载</strong></td>
<td>每次重启需 <code>ssh-add</code></td>
<td>钥匙串自动管理</td>
</tr>
<tr>
<td><strong>公钥复制</strong></td>
<td><code>cat &gt; /dev/clipboard</code></td>
<td><code>pbcopy</code> 或 <code>xclip</code></td>
</tr>
<tr>
<td><strong>权限修复</strong></td>
<td><code>icacls</code> 命令</td>
<td><code>chmod</code> 命令</td>
</tr>
</tbody></table>
<blockquote>
<p>✅ 通过此指南，可实现 <strong>Windows&#x2F;macOS&#x2F;Linux 三系统统一配置</strong>，仅代理加载和权限命令存在差异。  </p>
</blockquote>
<hr>
<p><strong>参考资料</strong>：<br>[1] <a href="https://blog.csdn.net/Anmory/article/details/147909882">Ubuntu 配置 GitHub SSH</a>｜[5] <a href="http://www.zxcms.com/content/c3vf0tz331l6la.html">SSH 通用配置</a>｜[10] <a href="http://www.zxcms.com/content/go2u41x331l6xt.html">GitHub 添加 SSH 密钥</a>｜[11] <a href="https://deepinout.com/git/git-questions/58_hk_1708699184.html">SSH 密钥生成详解</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>🔥 Android算法突击：30天速成指南——从零到Offer的进阶宝典</title>
    <url>/post/a2a378f1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="🔥-Android算法突击：30天速成指南——从零到Offer的进阶宝典"><a href="#🔥-Android算法突击：30天速成指南——从零到Offer的进阶宝典" class="headerlink" title="🔥 Android算法突击：30天速成指南——从零到Offer的进阶宝典"></a>🔥 Android算法突击：30天速成指南——从零到Offer的进阶宝典</h2><hr>
<h3 id="一、核心面试要求（结合Android开发特性）"><a href="#一、核心面试要求（结合Android开发特性）" class="headerlink" title="一、核心面试要求（结合Android开发特性）"></a>一、核心面试要求（结合Android开发特性）</h3><ol>
<li><p><strong>数据结构与基础算法</strong>  </p>
<ul>
<li><strong>高频数据结构</strong>：链表、二叉树、栈与队列。  </li>
<li><strong>排序与查找</strong>：快速排序、归并排序、二分查找（需掌握边界条件处理）。  </li>
<li><strong>动态规划</strong>：背包问题、路径问题，需结合Android场景（如资源优化）。</li>
</ul>
</li>
<li><p><strong>Android专项算法融合</strong>  </p>
<ul>
<li><strong>UI与性能优化</strong>：View树遍历、嵌套层级计算、卡顿检测中的滑动窗口算法 。  </li>
<li><strong>缓存设计</strong>：LRU缓存实现，类似Glide的Bitmap缓存策略。  </li>
<li><strong>多线程与同步</strong>： <a href="https://leetcode.cn/problems/design-bounded-blocking-queue/">生产者-消费者模型</a> 、线程池任务调度（如<code>AsyncTask</code>优化）。</li>
</ul>
</li>
<li><p><strong>系统设计与工程思维</strong>  </p>
<ul>
<li><strong>复杂问题拆解</strong>：如实现图片加载库的缓存淘汰策略（需综合LRU和尺寸限制）。  </li>
<li><strong>设计模式应用</strong>：观察者模式（LiveData）、工厂模式（模块化解耦）。<mark class="hl-label default">更新中</mark> </li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、1个月高效复习路线"><a href="#二、1个月高效复习路线" class="headerlink" title="二、1个月高效复习路线"></a>二、1个月高效复习路线</h3><hr>
<h4 id="第1周：夯实基础（数据结构与经典算法）"><a href="#第1周：夯实基础（数据结构与经典算法）" class="headerlink" title="第1周：夯实基础（数据结构与经典算法）"></a><strong>第1周：夯实基础（数据结构与经典算法）</strong></h4><ol>
<li><strong>每日核心任务</strong>  <ul>
<li><strong>必刷题（3道&#x2F;天）</strong>：  <ul>
<li>链表：<a href="https://leetcode.cn/problems/reverse-linked-list/">206.反转链表</a>、<a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21.合并有序列表</a>、<a href="https://leetcode.cn/problems/linked-list-cycle/">141.环形链表检测</a>。  </li>
<li>二叉树：<a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102.层序遍历</a>、<a href="https://leetcode.cn/problems/symmetric-tree/">101.对称判断</a>、<a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.最大深度</a>。  </li>
<li>双指针：<a href="https://leetcode.cn/problems/3sum/">15.三数之和</a>、<a href="https://leetcode.cn/problems/sliding-window-maximum/">239.滑动窗口最大值</a>（模拟页面停留统计）。  </li>
<li>栈与队列：<a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232.双栈实现队列</a>。</li>
<li>排序与查找：<a href="https://leetcode.cn/problems/sort-an-array/">912.快速排序、堆排序</a>、<a href="https://leetcode.cn/problems/sort-list/">归并排序</a>、<a href="https://leetcode.cn/problems/binary-search/">二分查找</a>。</li>
</ul>
</li>
<li><strong>Android结合练习</strong>：  <ul>
<li>用链表实现<code>Handler</code>消息队列的入队&#x2F;出队逻辑。</li>
</ul>
</li>
</ul>
</li>
<li><strong>重点突破</strong>  <ul>
<li><strong>时间复杂度分析</strong>：掌握大O表示法，对比不同排序算法性能（如快排 vs 归并）。  </li>
<li><strong>递归与分治</strong>：二叉树遍历的递归实现，分治思想在合并排序中的应用。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="第2周：进阶实战（动态规划与高频题型）"><a href="#第2周：进阶实战（动态规划与高频题型）" class="headerlink" title="第2周：进阶实战（动态规划与高频题型）"></a><strong>第2周：进阶实战（动态规划与高频题型）</strong></h4><ol>
<li><strong>动态规划五步法</strong>  <ul>
<li><strong>状态定义 → 转移方程 → 初始化 → 遍历顺序 → 实战验证</strong>：  <ul>
<li>背包问题（如 <a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416.分割等和子集</a>、<a href="https://leetcode.cn/problems/target-sum/description/">494.目标和</a>） → APK体积优化（资源限制场景）。  </li>
<li>路径问题（如 <a href="https://leetcode.cn/problems/climbing-stairs/">70.爬楼梯</a>、<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock">121.买卖股票的最佳时机</a>、<a href="https://leetcode.cn/problems/maximum-subarray">53.最大子数组和</a>）→ View层级穿透检测（如点击事件传递）。</li>
</ul>
</li>
<li><strong>经典题目</strong>：<a href="https://leetcode.cn/problems/coin-change/">322.零钱兑换</a>（缓存策略）、<a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300.最长递增子序列</a>（RecyclerView数据更新优化）。</li>
</ul>
</li>
<li><strong>高频题型分类</strong>  <ul>
<li><strong>TOP K问题</strong>：堆排序（崩溃日志统计）、快排变形（如<a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/">数组第K大元素</a>）。  </li>
<li><strong>子数组问题</strong>：<a href="https://leetcode.cn/problems/longest-common-prefix/">前缀和</a>（如连续帧率低于阈值时段检测）。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="第3周：Android场景融合与系统设计"><a href="#第3周：Android场景融合与系统设计" class="headerlink" title="第3周：Android场景融合与系统设计"></a><strong>第3周：Android场景融合与系统设计</strong></h4><ol>
<li><p><strong>Android特色算法题</strong>  </p>
<ul>
<li><strong>UI渲染优化</strong>：减少布局层级的算法设计（结合<code>ConstraintLayout</code>原理）。  <ul>
<li><a href="(https://blog.csdn.net/zhonglixiaobin/article/details/85700055)">View树遍历</a>（DFS&#x2F;BFS）</li>
</ul>
</li>
<li><strong>性能调优</strong>：内存泄漏检测中的引用链分析（如LeakCanary底层实现）。  </li>
<li><strong>网络与缓存</strong>：设计支持断点续传的多线程下载器（结合线程池与文件分块）。</li>
</ul>
</li>
<li><p><strong>系统设计实战</strong>  </p>
<ul>
<li><a href="https://leetcode.cn/problems/lru-cache/description/"><strong>手写LRU缓存</strong></a>：要求支持O(1)时间复杂度，结合<code>LinkedHashMap</code>或双向链表+哈希表。  </li>
<li><strong>消息机制模拟</strong>：用队列实现<code>Handler</code>的消息延迟处理逻辑。</li>
</ul>
</li>
</ol>
<hr>
<h4 id="第4周：模拟面试与错题冲刺"><a href="#第4周：模拟面试与错题冲刺" class="headerlink" title="第4周：模拟面试与错题冲刺"></a><strong>第4周：模拟面试与错题冲刺</strong></h4><ol>
<li><p><strong>全真模拟（每日2轮）</strong>  </p>
<ul>
<li><strong>Google式面试流程</strong>：  <ul>
<li><strong>5分钟需求分析</strong>：明确输入输出边界（如ANR场景下的性能要求）。  </li>
<li><strong>30分钟编码</strong>：手写算法（如合并有序Cursor查询结果）。  </li>
<li><strong>10分钟优化</strong>：复杂度分析+Android场景扩展（如Bitmap加载优化）。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>错题本与专项突破</strong>  </p>
<ul>
<li><strong>错误类型处理</strong>：  <ul>
<li><strong>思路错误</strong>：同类题狂刷（如5道二叉树遍历变种题）。  </li>
<li><strong>边界条件错误</strong>：单元测试验证（如空数组、极值输入）。</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、关键学习资源与工具"><a href="#三、关键学习资源与工具" class="headerlink" title="三、关键学习资源与工具"></a>三、关键学习资源与工具</h3><ol>
<li><strong>刷题平台</strong>：  <ul>
<li><strong>LeetCode高频题标签</strong>：<br><a href="https://leetcode.cn/tag/linked-list/">链表</a> | <a href="https://leetcode.cn/tag/tree/">树</a> | <a href="https://leetcode.cn/tag/dynamic-programming/">动态规划</a>  </li>
<li><strong>CodeTop高频题单</strong>：<br><a href="https://codetop.cc/home">Android面试高频题</a></li>
</ul>
</li>
</ol>
<hr>
<h3 id="四、避坑指南与面试技巧"><a href="#四、避坑指南与面试技巧" class="headerlink" title="四、避坑指南与面试技巧"></a>四、避坑指南与面试技巧</h3><ol>
<li><p><strong>常见误区</strong>：  </p>
<ul>
<li><strong>过度追求难题</strong>：面试中80%为中等题，需保证代码无BUG且逻辑清晰。  </li>
<li><strong>忽视工程思维</strong>：在解释算法时，需关联Android实际场景（如“此算法可优化RecyclerView的diff效率”）。</li>
</ul>
</li>
<li><p><strong>加分技巧</strong>：  </p>
<ul>
<li><strong>白板编码规范</strong>：先写伪代码框架，再填充细节，最后标注复杂度。  </li>
<li><strong>主动提问</strong>：如“是否需要考虑多线程安全？”“数据规模是否有限制？”。</li>
</ul>
</li>
<li><p><strong>补充说明</strong></p>
<ul>
<li><strong>CodeTop使用技巧</strong>：可按企业（如字节、腾讯）或岗位（Android开发）筛选高频题，支持模拟面试计时功能。</li>
<li><strong>LeetCode实战建议</strong>：优先完成各分类的“精选TOP面试题”，结合《代码随想录》的<a href="https://programmercarl.com/">Android场景解析</a>强化工程思维。</li>
</ul>
</li>
</ol>
<hr>
<p>通过以上补充，所有算法题目均关联了LeetCode实战链接和CodeTop刷题入口，帮助快速定位高频考点。建议结合CodeTop的<a href="https://codetop.cc/home">企业题库</a>针对性训练，强化面试手撕代码能力。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官连环追问的Handler考点，这份避坑指南全说透了（附脑图）</title>
    <url>/post/8ab4a728.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面试官连环追问的Handler考点，这份避坑指南全说透了（附脑图）"><a href="#面试官连环追问的Handler考点，这份避坑指南全说透了（附脑图）" class="headerlink" title="面试官连环追问的Handler考点，这份避坑指南全说透了（附脑图）"></a>面试官连环追问的Handler考点，这份避坑指南全说透了（附脑图）</h2><h3 id="引言：为什么需要Handler？"><a href="#引言：为什么需要Handler？" class="headerlink" title="引言：为什么需要Handler？"></a>引言：为什么需要Handler？</h3><p>在Android系统中，主线程（UI线程）负责处理用户交互和界面更新。如果开发者在主线程执行耗时操作（如网络请求），会导致界面卡顿甚至ANR。但当我们开启子线程处理完耗时任务后，又需要回到主线程更新UI——这就像两个平行世界需要沟通，而Handler就是架起这座桥梁的使者。</p>
<hr>
<h3 id="一、Handler四重奏：核心组件全景图"><a href="#一、Handler四重奏：核心组件全景图" class="headerlink" title="一、Handler四重奏：核心组件全景图"></a>一、Handler四重奏：核心组件全景图</h3><h4 id="1-Handler（信使）"><a href="#1-Handler（信使）" class="headerlink" title="1. Handler（信使）"></a>1. Handler（信使）</h4><ul>
<li>消息发送者与处理者</li>
<li>持有一个指向创建线程的Looper和MessageQueue</li>
<li>示例代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里处理消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-Message（信件）"><a href="#2-Message（信件）" class="headerlink" title="2. Message（信件）"></a>2. Message（信件）</h4><ul>
<li>包含what、arg1、arg2、obj等字段</li>
<li>推荐使用<code>obtainMessage()</code>复用对象</li>
</ul>
<h4 id="3-MessageQueue（邮局）"><a href="#3-MessageQueue（邮局）" class="headerlink" title="3. MessageQueue（邮局）"></a>3. MessageQueue（邮局）</h4><ul>
<li>优先级消息队列（when属性决定顺序）</li>
<li>使用单链表数据结构</li>
</ul>
<h4 id="4-Looper（邮差）"><a href="#4-Looper（邮差）" class="headerlink" title="4. Looper（邮差）"></a>4. Looper（邮差）</h4><ul>
<li>核心死循环：<code>Looper.loop()</code></li>
<li>ThreadLocal保证线程隔离性</li>
<li>准备Looper的正确姿势：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WorkerThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Handler handler;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        Looper.prepare();  <span class="comment">// 创建Looper</span></span><br><span class="line">        handler = <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">        Looper.loop();     <span class="comment">// 启动循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="二、工作原理全景图"><a href="#二、工作原理全景图" class="headerlink" title="二、工作原理全景图"></a>二、工作原理全景图</h3><div style="float: left; margin-right: 15px;"> 
  <img src="/post/8ab4a728/Handler%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" class="" width="400" height="170" title="Handler工作原理">
</div>  
<!-- 清除浮动 -->
<div style="clear: both;"></div>

<ol>
<li>Handler发送Message到MessageQueue</li>
<li>Looper不断轮询取出Message</li>
<li>回调Handler的handleMessage()</li>
<li>Message进入回收池复用</li>
</ol>
<hr>
<h3 id="三、经典使用场景"><a href="#三、经典使用场景" class="headerlink" title="三、经典使用场景"></a>三、经典使用场景</h3><h4 id="1-跨线程更新UI"><a href="#1-跨线程更新UI" class="headerlink" title="1. 跨线程更新UI"></a>1. 跨线程更新UI</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 耗时操作</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">    msg.what = UPDATE_UI;</span><br><span class="line">    handler.sendMessage(msg);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h4 id="2-定时任务"><a href="#2-定时任务" class="headerlink" title="2. 定时任务"></a>2. 定时任务</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 立即执行</span></span><br><span class="line">handler.sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1秒后执行</span></span><br><span class="line">handler.postDelayed(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 定时任务逻辑</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-线程切换利器"><a href="#3-线程切换利器" class="headerlink" title="3. 线程切换利器"></a>3. 线程切换利器</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">CoroutineScope(Dispatchers.IO).launch &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="keyword">data</span> = fetchData()</span><br><span class="line">    withContext(Dispatchers.Main) &#123; <span class="comment">// 内部实际使用Handler</span></span><br><span class="line">        updateUI(<span class="keyword">data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="四、避坑指南"><a href="#四、避坑指南" class="headerlink" title="四、避坑指南"></a>四、避坑指南</h3><h4 id="1-内存泄漏预防"><a href="#1-内存泄漏预防" class="headerlink" title="1. 内存泄漏预防"></a>1. 内存泄漏预防</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误示范：匿名内部类隐式持有Activity引用</span></span><br><span class="line"><span class="type">Handler</span> <span class="variable">leakHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 访问Activity成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确方案</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SafeHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Activity&gt; weakActivity;</span><br><span class="line"></span><br><span class="line">    SafeHandler(Activity activity) &#123;</span><br><span class="line">        weakActivity = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="type">Activity</span> <span class="variable">activity</span> <span class="operator">=</span> weakActivity.get();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 安全操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-ANR预防原则"><a href="#2-ANR预防原则" class="headerlink" title="2. ANR预防原则"></a>2. ANR预防原则</h4><ul>
<li>单个消息处理不超过5ms</li>
<li>避免同步屏障滥用</li>
<li>及时移除不需要的Callback</li>
</ul>
<p><strong>3. Handler避坑手册</strong></p>
<table>
<thead>
<tr>
<th>危险模式</th>
<th>安全方案</th>
<th>原理阐释</th>
</tr>
</thead>
<tbody><tr>
<td>匿名Handler持有Activity引用</td>
<td>静态内部类+WeakReference</td>
<td>切断GC引用链</td>
</tr>
<tr>
<td>postDelayed未及时移除消息</td>
<td>onDestroy调用removeMessages()</td>
<td>防止僵尸消息唤醒</td>
</tr>
<tr>
<td>子线程未调用Looper.quitSafely()</td>
<td>try-finally中执行Looper退出</td>
<td>避免FD泄漏</td>
</tr>
<tr>
<td>跨线程更新UI未检查isAttached</td>
<td>View.post()+attachState监听</td>
<td>规避无效View操作</td>
</tr>
</tbody></table>
<hr>
<h3 id="五、进阶技巧"><a href="#五、进阶技巧" class="headerlink" title="五、进阶技巧"></a>五、进阶技巧</h3><h4 id="1-同步屏障（Sync-Barrier）"><a href="#1-同步屏障（Sync-Barrier）" class="headerlink" title="1. 同步屏障（Sync Barrier）"></a>1. 同步屏障（Sync Barrier）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插入屏障</span></span><br><span class="line"><span class="type">MessageQueue</span> <span class="variable">queue</span> <span class="operator">=</span> Looper.getMainLooper().mQueue;</span><br><span class="line"><span class="type">int</span> <span class="variable">token</span> <span class="operator">=</span> queue.postSyncBarrier();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送异步消息</span></span><br><span class="line"><span class="type">Message</span> <span class="variable">asyncMsg</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">asyncMsg.setAsynchronous(<span class="literal">true</span>);</span><br><span class="line">handler.sendMessageAtTime(asyncMsg, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除屏障</span></span><br><span class="line">queue.removeSyncBarrier(token);</span><br></pre></td></tr></table></figure>

<h4 id="2-IdleHandler妙用"><a href="#2-IdleHandler妙用" class="headerlink" title="2. IdleHandler妙用"></a>2. IdleHandler妙用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Looper.myQueue().addIdleHandler(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 在消息队列空闲时执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// true保持持续监听</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="六、现代替代方案对比"><a href="#六、现代替代方案对比" class="headerlink" title="六、现代替代方案对比"></a>六、现代替代方案对比</h3><table>
<thead>
<tr>
<th>维度</th>
<th>Handler优势</th>
<th>Coroutine优势</th>
<th>选型建议</th>
</tr>
</thead>
<tbody><tr>
<td>内存开销</td>
<td>无额外对象创建（Message复用）</td>
<td>协程挂起节约线程资源</td>
<td>高频轻量任务选Handler</td>
</tr>
<tr>
<td>生命周期管理</td>
<td>需手动释放</td>
<td>结构化并发自动取消</td>
<td>复杂异步流选Coroutine</td>
</tr>
<tr>
<td>可读性</td>
<td>回调嵌套较深</td>
<td>线性异步代码</td>
<td>业务逻辑复杂时选Coroutine</td>
</tr>
<tr>
<td>系统兼容性</td>
<td>全版本支持</td>
<td>需Kotlin及协程库</td>
<td>老项目维护必选Handler</td>
</tr>
</tbody></table>
<h3 id="七、面试高压问答模拟"><a href="#七、面试高压问答模拟" class="headerlink" title="七、面试高压问答模拟"></a><strong>七、面试高压问答模拟</strong></h3><p><strong>场景1：初级工程师必答题</strong><br><strong>Q1：Handler四大核心组件如何协作？</strong>  </p>
<ul>
<li><p><strong>死亡陷阱</strong>：仅回答”Handler发送消息-Looper循环处理”表层流程  </p>
</li>
<li><p><strong>满分答案</strong>：结合MessageQueue链表结构图，说明<code>Handler.sendMessage()</code>→<code>MessageQueue.enqueueMessage()</code>→<code>Looper.loop()</code>→<code>Message.recycle()</code>闭环</p>
</li>
</ul>
<p><strong>场景2：中级工程师进阶题</strong><br><strong>Q2：主线程Looper死循环为何不导致ANR？</strong>  </p>
<ul>
<li><strong>技术本质</strong>：<br>① 通过epoll机制实现空闲阻塞<br>② Choreographer垂直同步协调UI刷新（补充VSYNC信号机制）  </li>
<li><strong>反常识论证</strong>：对比普通死循环与消息队列阻塞差异</li>
</ul>
<p><strong>场景3：高级工程师灵魂拷问</strong><br><strong>Q3：如何设计永不泄漏的Handler？</strong>  </p>
<ul>
<li><p><strong>防御方案</strong>：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全Handler模板</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SafeHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Context&gt; weakContext;</span><br><span class="line">    </span><br><span class="line">    SafeHandler(Context context, Looper looper) &#123;</span><br><span class="line">        <span class="built_in">super</span>(looper);</span><br><span class="line">        weakContext = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(context);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weakContext.get() == <span class="literal">null</span>) removeCallbacksAndMessages(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>极端场景防护</strong>：后台强杀时WeakReference失效检测</p>
</li>
</ul>
<p><strong>【Handler面试脑图】</strong>  </p>
<img src="/post/8ab4a728/Handler%E7%9F%A5%E8%AF%86%E7%82%B9%E8%84%91%E5%9B%BE.png" class="" width="716" height="300" title="Handler知识点脑图">

<!-- 清除浮动 -->
<div style="clear: both;"></div>

<hr>
<h3 id="结语：Handler的设计哲学"><a href="#结语：Handler的设计哲学" class="headerlink" title="结语：Handler的设计哲学"></a>结语：Handler的设计哲学</h3><p>Handler机制体现了Android系统两大设计智慧：</p>
<ol>
<li><strong>单线程模型</strong>：通过消息队列实现线程安全</li>
<li><strong>对象池模式</strong>：Message的回收复用提升性能</li>
</ol>
<p>理解Handler不仅是为了应对面试，更是打开Android系统设计思想的一把钥匙。当你下次看到<code>ActivityThread.main()</code>方法里的<code>Looper.loop()</code>时，应该会心一笑——这就是Android世界永不停歇的心跳。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发全指南：了解如何确保应用安全，增强用户信任与满意度！</title>
    <url>/post/b5369373.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：学习如何设计引人入胜的UI，以提升用户的应用体验！</title>
    <url>/post/17c79a2f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用户界面（UI）的设计不仅是美观的问题，更直接关系到用户的整体应用体验。一个设计精良的UI可以显著提升用户的满意度，并使应用更具吸引力。本文将深入探讨如何通过有效的布局管理和自定义View创建，打造令人惊叹的用户界面。</p>
<h3 id="一、布局管理：提升UI性能与美观"><a href="#一、布局管理：提升UI性能与美观" class="headerlink" title="一、布局管理：提升UI性能与美观"></a>一、布局管理：提升UI性能与美观</h3><h4 id="1-ConstraintLayout：优化复杂布局设计"><a href="#1-ConstraintLayout：优化复杂布局设计" class="headerlink" title="1. ConstraintLayout：优化复杂布局设计"></a>1. <strong>ConstraintLayout：优化复杂布局设计</strong></h4><ul>
<li><p><strong>优势</strong>：ConstraintLayout是Android中一种强大的布局管理器，能够有效简化复杂布局设计。相比传统的布局，如LinearLayout或RelativeLayout，ConstraintLayout减少了嵌套层级，降低了布局的复杂度，从而提高了性能和渲染效率。</p>
</li>
<li><p><strong>使用技巧</strong>：</p>
<ul>
<li><strong>约束设置</strong>：通过设置视图间的约束关系，定义视图的位置和大小。这种方式不仅直观，而且能够确保布局的自适应性。</li>
<li><strong>链式布局</strong>：利用ConstraintLayout中的链式布局功能，可以实现多个视图的对齐和间距管理，提升布局的灵活性。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：假设你在设计一个社交媒体应用的主页，使用ConstraintLayout能够方便地将图片、文本和按钮安排在不同位置，并确保它们在不同屏幕尺寸上的一致性。</p>
</li>
</ul>
<h4 id="2-Material-Design：提升视觉与交互体验"><a href="#2-Material-Design：提升视觉与交互体验" class="headerlink" title="2. Material Design：提升视觉与交互体验"></a>2. <strong>Material Design：提升视觉与交互体验</strong></h4><ul>
<li><p><strong>设计原则</strong>：Material Design是Google提出的设计语言，旨在创建具有一致性和现代感的用户界面。它强调了颜色、排版、图标和动画的使用，以提升用户体验。</p>
</li>
<li><p><strong>核心组件</strong>：</p>
<ul>
<li><strong>按钮</strong>：使用Material Design的按钮组件，可以确保按钮具有合适的大小、间距和反馈效果。</li>
<li><strong>卡片</strong>：卡片组件用于显示信息和操作，具备阴影和圆角效果，使界面更加层次分明。</li>
</ul>
</li>
<li><p><strong>实践技巧</strong>：</p>
<ul>
<li><strong>主题和样式</strong>：通过Material Components库中的主题和样式，保持应用的统一视觉风格，并实现主题切换功能。</li>
<li><strong>动效</strong>：合理使用Material Design中的动效和过渡动画，让界面更加生动和互动。</li>
</ul>
</li>
</ul>
<h3 id="二、自定义View：打造独特的UI组件"><a href="#二、自定义View：打造独特的UI组件" class="headerlink" title="二、自定义View：打造独特的UI组件"></a>二、自定义View：打造独特的UI组件</h3><h4 id="1-创建自定义View"><a href="#1-创建自定义View" class="headerlink" title="1. 创建自定义View"></a>1. <strong>创建自定义View</strong></h4><ul>
<li><p><strong>基础知识</strong>：自定义View可以让你创建独特的UI组件，满足特定需求。你可以通过继承<code>View</code>类或<code>ViewGroup</code>类来实现自定义视图。</p>
</li>
<li><p><strong>实现步骤</strong>：</p>
<ul>
<li><strong>继承<code>View</code>类</strong>：如果你需要创建一个单独的自定义视图，继承<code>View</code>类，并重写<code>onDraw()</code>方法来绘制视图内容。</li>
<li><strong>继承<code>ViewGroup</code>类</strong>：如果你需要创建一个容器视图，继承<code>ViewGroup</code>类，并实现<code>onLayout()</code>方法来安排子视图的位置。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：假设你需要设计一个自定义的图表控件，你可以继承<code>View</code>类，并在<code>onDraw()</code>中使用Canvas绘制图形，满足特定的展示需求。</p>
</li>
</ul>
<h4 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2. 性能优化"></a>2. <strong>性能优化</strong></h4><ul>
<li><p><strong>绘制性能</strong>：优化自定义View的绘制过程，避免在<code>onDraw()</code>中执行复杂的计算。尽可能缓存绘制结果，减少不必要的重绘。</p>
</li>
<li><p><strong>布局性能</strong>：优化自定义View的布局过程，减少不必要的测量和布局操作。通过合理的测量和布局策略，确保自定义View的性能不会影响整体界面流畅度。</p>
</li>
<li><p><strong>实践技巧</strong>：</p>
<ul>
<li><strong>硬件加速</strong>：开启硬件加速以提升绘制性能，确保自定义View在各种设备上的表现一致。</li>
<li><strong>避免过度绘制</strong>：减少视图重叠和不必要的背景绘制，确保UI渲染的效率和流畅性。</li>
</ul>
</li>
</ul>
<h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>设计一个引人入胜的用户界面是提升应用用户体验的关键。通过掌握有效的布局管理技巧，如使用ConstraintLayout优化复杂布局，以及深入了解Material Design的设计原则，你可以创建出既美观又实用的界面。同时，自定义View的创建和性能优化也能帮助你实现独特的UI组件，满足特定需求。</p>
<p>希望本文对你理解和应用UI设计的最佳实践有所帮助，让你的应用在众多竞争者中脱颖而出。如果你有任何问题或建议，欢迎在评论区与我互动！</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：学习高效的测试与调试技巧，提升你的开发水平！</title>
    <url>/post/5d715b31.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：掌握依赖注入和模块化设计，提高项目的可维护性！</title>
    <url>/post/752ec13d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：掌握数据存储与网络通信，驱动你的Android应用！</title>
    <url>/post/a8531bad.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Android应用开发中，数据存储和网络通信是实现核心功能的关键环节。掌握这些技术，可以让你的应用更高效、更智能。本文将详细介绍Android中的数据存储和网络编程，帮助你提升应用性能和用户体验。</p>
<h3 id="一、数据存储：管理应用数据的核心技术"><a href="#一、数据存储：管理应用数据的核心技术" class="headerlink" title="一、数据存储：管理应用数据的核心技术"></a>一、数据存储：管理应用数据的核心技术</h3><h4 id="1-SharedPreferences：简单数据的存储"><a href="#1-SharedPreferences：简单数据的存储" class="headerlink" title="1. SharedPreferences：简单数据的存储"></a>1. <strong>SharedPreferences：简单数据的存储</strong></h4><ul>
<li><p><strong>用途</strong>：SharedPreferences用于存储简单的键值对数据，适合保存用户设置、应用配置等信息。其数据存储在XML文件中，读取和写入操作都很简单。</p>
</li>
<li><p><strong>操作步骤</strong>：</p>
<ul>
<li><strong>保存数据</strong>：通过<code>SharedPreferences.Editor</code>对象使用<code>putString()</code>, <code>putInt()</code>等方法保存数据，并调用<code>apply()</code>或<code>commit()</code>方法提交更改。</li>
<li><strong>读取数据</strong>：使用<code>SharedPreferences</code>对象的<code>getString()</code>, <code>getInt()</code>等方法读取数据，提供默认值以防数据不存在。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：例如，在应用中保存用户的主题设置（暗黑模式或亮色模式）可以使用SharedPreferences，实现简单且高效的数据存储。</p>
</li>
</ul>
<h4 id="2-SQLite和Room：复杂数据操作的解决方案"><a href="#2-SQLite和Room：复杂数据操作的解决方案" class="headerlink" title="2. SQLite和Room：复杂数据操作的解决方案"></a>2. <strong>SQLite和Room：复杂数据操作的解决方案</strong></h4><ul>
<li><p><strong>SQLite</strong>：</p>
<ul>
<li><strong>数据库操作</strong>：SQLite是Android内置的轻量级数据库，用于处理复杂的数据存储需求。通过创建数据库表、执行SQL语句等进行数据操作。</li>
<li><strong>实践技巧</strong>：使用SQLiteOpenHelper类管理数据库的创建和版本管理，避免直接操作数据库的复杂性。</li>
</ul>
</li>
<li><p><strong>Room</strong>：</p>
<ul>
<li><strong>概述</strong>：Room是Google提供的数据库库，封装了SQLite的操作，并提供了更简洁的API。通过注解和数据访问对象（DAO）简化数据库操作。</li>
<li><strong>操作步骤</strong>：<ul>
<li><strong>定义实体</strong>：使用<code>@Entity</code>注解定义数据表，并通过<code>@PrimaryKey</code>等注解定义表的列。</li>
<li><strong>创建DAO</strong>：定义数据访问对象接口，使用<code>@Dao</code>注解，并定义插入、查询、更新、删除方法。</li>
<li><strong>数据库实例</strong>：通过<code>Room.databaseBuilder()</code>方法创建数据库实例，确保线程安全并优化性能。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：假设你在开发一个笔记应用，使用Room来管理笔记的存储，利用注解和DAO实现高效的数据操作和管理。</p>
</li>
</ul>
<h3 id="二、网络编程：实现数据获取和处理"><a href="#二、网络编程：实现数据获取和处理" class="headerlink" title="二、网络编程：实现数据获取和处理"></a>二、网络编程：实现数据获取和处理</h3><h4 id="1-Retrofit：简化网络请求与API接口调用"><a href="#1-Retrofit：简化网络请求与API接口调用" class="headerlink" title="1. Retrofit：简化网络请求与API接口调用"></a>1. <strong>Retrofit：简化网络请求与API接口调用</strong></h4><ul>
<li><p><strong>概述</strong>：Retrofit是一个类型安全的HTTP客户端，用于简化网络请求和API接口的调用。它支持REST API的调用，能够处理JSON数据并自动解析成对象。</p>
</li>
<li><p><strong>操作步骤</strong>：</p>
<ul>
<li><strong>定义接口</strong>：创建一个接口，使用<code>@GET</code>, <code>@POST</code>等注解定义HTTP请求的方法和URL。</li>
<li><strong>创建Retrofit实例</strong>：使用<code>Retrofit.Builder</code>构建Retrofit实例，并指定基地址和解析器。</li>
<li><strong>发起请求</strong>：调用接口方法发起网络请求，并处理响应数据或错误。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：例如，你的应用需要从网络获取天气数据，可以使用Retrofit发送请求，解析返回的JSON数据，并在应用中显示天气信息。</p>
</li>
</ul>
<h4 id="2-OKHttp：处理HTTP请求和响应"><a href="#2-OKHttp：处理HTTP请求和响应" class="headerlink" title="2. OKHttp：处理HTTP请求和响应"></a>2. <strong>OKHttp：处理HTTP请求和响应</strong></h4><ul>
<li><p><strong>概述</strong>：OKHttp是一个强大的HTTP客户端，支持同步和异步请求，能够处理请求重试、缓存和拦截器等功能。它通常与Retrofit一起使用，以提高网络请求的效率和灵活性。</p>
</li>
<li><p><strong>操作步骤</strong>：</p>
<ul>
<li><strong>创建OKHttpClient实例</strong>：使用<code>OkHttpClient.Builder</code>构建客户端实例，并配置超时、缓存、拦截器等。</li>
<li><strong>发起请求</strong>：通过<code>Call</code>对象发起请求，并处理响应数据。</li>
<li><strong>拦截器</strong>：利用拦截器实现日志记录、请求重试等功能，增强网络请求的可控性。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：在使用Retrofit时，你可以通过OKHttp的拦截器记录网络请求日志，帮助调试和优化网络请求。</p>
</li>
</ul>
<h4 id="3-Glide：高效的图片加载与缓存"><a href="#3-Glide：高效的图片加载与缓存" class="headerlink" title="3. Glide：高效的图片加载与缓存"></a>3. <strong>Glide：高效的图片加载与缓存</strong></h4><ul>
<li><p><strong>概述</strong>：Glide是一个强大的图片加载和缓存库，支持从网络、本地和资源中加载图片，并提供高效的内存和磁盘缓存机制。</p>
</li>
<li><p><strong>操作步骤</strong>：</p>
<ul>
<li><strong>加载图片</strong>：使用<code>Glide.with(context).load(url).into(imageView)</code>方法加载图片到ImageView。</li>
<li><strong>缓存策略</strong>：通过<code>diskCacheStrategy()</code>设置图片的缓存策略，控制缓存的方式和时间。</li>
<li><strong>自定义</strong>：支持图片转换和自定义加载选项，如圆角、圆形等特效。</li>
</ul>
</li>
<li><p><strong>实践案例</strong>：在一个社交媒体应用中，使用Glide加载用户头像和动态图片，并利用缓存提高图片加载速度和用户体验。</p>
</li>
</ul>
<h3 id="三、结语"><a href="#三、结语" class="headerlink" title="三、结语"></a>三、结语</h3><p>掌握数据存储与网络编程技术是开发高效Android应用的基础。通过合理使用SharedPreferences、SQLite和Room来管理应用数据，以及利用Retrofit、OKHttp和Glide来处理网络请求和图片加载，你将能够构建功能强大且用户体验优良的应用。</p>
<p>希望本文对你理解数据存储和网络编程有所帮助，让你的应用能够更加稳定、流畅。若有问题或建议，欢迎在评论区交流与探讨！</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：探索Jetpack和Compose等现代技术，紧跟开发潮流！</title>
    <url>/post/4c5eb723.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：探索优化应用性能的最佳实践，让你的应用表现更加出色！</title>
    <url>/post/a2d9c915.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！</title>
    <url>/post/79a8e3a5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！</strong></p>
<p>在Android开发的广阔天地中，Java与Kotlin无疑是两把最锋利的剑。它们各自闪耀着独特的光芒，却又能够和谐共存，为开发者们开辟出一条条创新之路。今天，就让我们一起踏上这场探索之旅，看看如何掌握这两门强大的编程语言，从而成为Android开发领域的高手！</p>
<p><strong>一、Java：Android开发的传统强者</strong></p>
<p>Java，作为Android开发的原生语言，有着悠久的历史和深厚的底蕴。它的语法严谨、结构清晰，使得代码易于理解和维护。同时，Java拥有丰富的类库和强大的跨平台能力，为Android应用提供了坚实的基石。</p>
<ol>
<li><p><strong>基础语法与面向对象编程</strong>：从变量、数据类型到控制流语句，再到类和对象的创建与使用，Java的基础语法是每位Android开发者必须熟练掌握的。</p>
</li>
<li><p><strong>异常处理与多线程</strong>：在Android应用中，异常处理机制和多线程编程对于提升应用的稳定性和响应速度至关重要。Java提供了完善的异常处理类和多线程支持，让开发者能够轻松应对各种复杂场景。</p>
</li>
</ol>
<p><strong>二、Kotlin：新兴的语言力量</strong></p>
<p>Kotlin，作为近年来崭露头角的新兴编程语言，以其简洁、安全的特性迅速赢得了开发者的喜爱。它与Java完全兼容，并且在很多方面进行了优化和改进。</p>
<ol>
<li><p><strong>简洁的语法与空安全</strong>：Kotlin的语法更加简洁明了，减少了不必要的代码量。同时，它引入了空安全的概念，有效避免了空指针异常的问题。</p>
</li>
<li><p><strong>扩展函数与高阶函数</strong>：Kotlin允许开发者为现有类添加新的方法（扩展函数），这使得代码更加灵活和可重用。此外，Kotlin还支持高阶函数和Lambda表达式，让代码更加简洁高效。</p>
</li>
</ol>
<p><strong>三、双剑合璧：Java与Kotlin的协同作战</strong></p>
<p>在Android开发中，Java与Kotlin并非竞争关系，而是可以相互补充、协同作战的伙伴关系。开发者可以根据项目需求和团队习惯灵活选择使用哪种语言。</p>
<ol>
<li><p><strong>混合编程与互操作性</strong>：在同一个Android项目中，可以同时使用Java和Kotlin进行开发。两者之间的互操作性非常好，可以轻松地在两种语言之间调用方法和传递数据。</p>
</li>
<li><p><strong>利用各自优势</strong>：对于需要快速迭代和简洁语法的场景，可以选择使用Kotlin；而在需要利用丰富类库和跨平台能力的场景下，Java则更加合适。</p>
</li>
</ol>
<p><strong>四、结语</strong></p>
<p>掌握Java与Kotlin，就如同手握Android开发的双剑。通过深入学习和实践这两种语言，你将能够在Android开发的道路上披荆斩棘、勇往直前。无论你是初学者还是资深开发者，都不要错过这场探索之旅！让我们一起成为Android开发的高手吧！</p>
]]></content>
  </entry>
  <entry>
    <title>Android开发全指南：深入了解Android架构组件，提升应用稳定性与用户体验！</title>
    <url>/post/94392a3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在安卓开发中，了解基础架构组件是构建稳定和高效应用的基石。掌握这些组件不仅能提升应用的质量，还能增强用户体验。本文将逐一解析Android中的核心架构组件，帮助你深入理解其生命周期及作用。</p>
<h3 id="一、Activity与Fragment"><a href="#一、Activity与Fragment" class="headerlink" title="一、Activity与Fragment"></a>一、Activity与Fragment</h3><h4 id="1-Activity"><a href="#1-Activity" class="headerlink" title="1. Activity"></a>1. <strong>Activity</strong></h4><p>Activity是Android应用的一个基本组件，它用于展示UI界面并与用户进行交互。深入理解Activity的生命周期对于管理应用状态至关重要。</p>
<ul>
<li><p><strong>生命周期</strong>：了解Activity的各个状态，尤其是<code>onCreate</code>、<code>onStart</code>、<code>onResume</code>、<code>onPause</code>、<code>onStop</code>和<code>onDestroy</code>等生命周期方法，它们在不同情况下被调用。合理运用这些方法可以优化资源管理和用户体验。</p>
<ul>
<li><strong>状态保存与恢复</strong>：在<code>onSaveInstanceState()</code>中保存重要的UI状态，确保在Activity重新创建时能够恢复用户操作，增强应用的流畅性。</li>
</ul>
</li>
</ul>
<h4 id="2-Fragment"><a href="#2-Fragment" class="headerlink" title="2. Fragment"></a>2. <strong>Fragment</strong></h4><p>Fragment是Android中用于将UI逻辑进行模块化的组件，能够实现动态的界面切换。</p>
<ul>
<li><p><strong>生命周期</strong>：理解Fragment的生命周期（例如<code>onAttach</code>、<code>onCreateView</code>、<code>onActivityCreated</code>、<code>onStart</code>、<code>onResume</code>等），并掌握如何在其中处理UI更新和事件监听。</p>
</li>
<li><p><strong>动态操作</strong>：学习如何动态添加和移除Fragment，并利用<code>FragmentTransaction</code>来事务化管理Fragment的操作。</p>
</li>
<li><p><strong>Fragment间通信</strong>：通过接口回调和<code>ViewModel</code>实现Fragment之间数据的传递与通信，确保数据的一致性。</p>
</li>
</ul>
<h3 id="二、Service"><a href="#二、Service" class="headerlink" title="二、Service"></a>二、Service</h3><p>Service用于在后台执行长时间运行的操作，不会直接与用户界面交互。</p>
<h4 id="1-前台服务"><a href="#1-前台服务" class="headerlink" title="1. 前台服务"></a>1. <strong>前台服务</strong></h4><p>前台服务用于执行用户可见的任务，并伴随永久的通知，确保系统不会杀死服务。</p>
<ul>
<li><strong>创建与管理</strong>：学习如何通过<code>startForeground()</code>方法将服务设置为前台服务，为其提供通知，减少被系统终止的可能性。</li>
</ul>
<h4 id="2-后台服务"><a href="#2-后台服务" class="headerlink" title="2. 后台服务"></a>2. <strong>后台服务</strong></h4><p>后台服务适用于处理不需要与用户进行直接交互的任务。</p>
<ul>
<li><strong>任务处理</strong>：掌握如何在后台执行如数据同步、网络请求等操作。通过<code>IntentService</code>或<code>JobIntentService</code>提供更好的任务调度及管理。</li>
</ul>
<h3 id="三、BroadcastReceiver"><a href="#三、BroadcastReceiver" class="headerlink" title="三、BroadcastReceiver"></a>三、BroadcastReceiver</h3><p>BroadcastReceiver用于接收和处理广播消息，是实现应用间通信的有效工具。</p>
<h4 id="1-静态与动态注册"><a href="#1-静态与动态注册" class="headerlink" title="1. 静态与动态注册"></a>1. <strong>静态与动态注册</strong></h4><ul>
<li><p><strong>静态注册</strong>：在AndroidManifest.xml中注册接收器，可以接收系统和应用的广播。</p>
</li>
<li><p><strong>动态注册</strong>：在代码中注册和注销接收器，适用于需要在特定情况下处理广播的场景。</p>
</li>
</ul>
<h4 id="2-处理广播"><a href="#2-处理广播" class="headerlink" title="2. 处理广播"></a>2. <strong>处理广播</strong></h4><ul>
<li><p><strong>系统获取</strong>：掌握如何接收和处理系统广播（如电量变化、网络连接状态等），并响应这些事件。</p>
</li>
<li><p><strong>自定义广播</strong>：学习如何发送和接收自定义广播，以实现应用间的数据交换和通信。</p>
</li>
</ul>
<h3 id="四、ContentProvider"><a href="#四、ContentProvider" class="headerlink" title="四、ContentProvider"></a>四、ContentProvider</h3><p>ContentProvider是Android中用于数据共享与存储的组件。</p>
<h4 id="1-数据共享"><a href="#1-数据共享" class="headerlink" title="1. 数据共享"></a>1. <strong>数据共享</strong></h4><p>通过ContentProvider，可以实现不同应用之间的数据交互与共享。了解如何定义和使用ContentProvider对促进不同应用间的协作至关重要。</p>
<h4 id="2-CRUD操作"><a href="#2-CRUD操作" class="headerlink" title="2. CRUD操作"></a>2. <strong>CRUD操作</strong></h4><ul>
<li><strong>增删改查</strong>：掌握如何通过ContentProvider实现数据的增、删、改、查四个基本操作，了解如何处理URI匹配以实现多种数据存取需求。</li>
</ul>
<h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>深入理解Android基础架构组件，将为你构建稳定和高效的应用奠定坚实的基础。通过掌握Activity、Fragment、Service、BroadcastReceiver和ContentProvider等关键组件的生命周期和操作，你将能更好地管理应用的行为，提高用户体验和满意度。</p>
<p>希望这篇文章能够帮助你更好地理解Android架构组件，并为你的开发旅程保驾护航！如有疑问或想法，欢迎在评论区与我互动！</p>
]]></content>
  </entry>
  <entry>
    <title>学Android？这里有一本秘籍！</title>
    <url>/post/android-base-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol>
<li>学Android？在了解一下布局</li>
<li>学Android？自定义View了解一下</li>
<li>学Android？Handler了解一下</li>
<li>学Android？事件分发了解一下</li>
<li>开源库</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发者必学：从新手到高手的全指南</title>
    <url>/post/795293fc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="从新手到高手的全指南"><a href="#从新手到高手的全指南" class="headerlink" title="从新手到高手的全指南"></a>从新手到高手的全指南</h1><ol>
<li><a href="/post/79a8e3a5.html" title="Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！">Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！</a>  </li>
<li><a href="/post/94392a3.html" title="Android开发全指南：深入了解Android架构组件，提升应用稳定性与用户体验！">Android开发全指南：深入了解Android架构组件，提升应用稳定性与用户体验！</a></li>
<li><a href="/post/17c79a2f.html" title="Android开发全指南：学习如何设计引人入胜的UI，以提升用户的应用体验！">Android开发全指南：学习如何设计引人入胜的UI，以提升用户的应用体验！</a></li>
<li><a href="/post/a8531bad.html" title="Android开发全指南：掌握数据存储与网络通信，驱动你的Android应用！">Android开发全指南：掌握数据存储与网络通信，驱动你的Android应用！</a></li>
<li><a href="/post/a2d9c915.html" title="Android开发全指南：探索优化应用性能的最佳实践，让你的应用表现更加出色！">Android开发全指南：探索优化应用性能的最佳实践，让你的应用表现更加出色！</a></li>
<li><a href="/post/4c5eb723.html" title="Android开发全指南：探索Jetpack和Compose等现代技术，紧跟开发潮流！">Android开发全指南：探索Jetpack和Compose等现代技术，紧跟开发潮流！</a></li>
<li><a href="/post/5d715b31.html" title="Android开发全指南：学习高效的测试与调试技巧，提升你的开发水平！">Android开发全指南：学习高效的测试与调试技巧，提升你的开发水平！</a></li>
<li><a href="/post/752ec13d.html" title="Android开发全指南：掌握依赖注入和模块化设计，提高项目的可维护性！">Android开发全指南：掌握依赖注入和模块化设计，提高项目的可维护性！</a></li>
<li><a href="/post/b5369373.html" title="Android开发全指南：了解如何确保应用安全，增强用户信任与满意度！">Android开发全指南：了解如何确保应用安全，增强用户信任与满意度！</a></li>
</ol>
</br>

<p>在移动开发的浩瀚星海中，Android以其开放性和庞大的用户基础，成为了无数开发者梦想启航的港湾。从初识Java的懵懂到精通Kotlin的流畅，从构建基础的UI界面到驾驭复杂的网络交互，每一位Android开发者都在这条道路上不断探索、成长。今天，就让我们携手踏上这场从新手到高手的华丽蜕变之旅，共同揭开Android开发的神秘面纱。</p>
<hr>
<h2 id="1-Java与Kotlin：Android开发的双剑合璧"><a href="#1-Java与Kotlin：Android开发的双剑合璧" class="headerlink" title="1. Java与Kotlin：Android开发的双剑合璧"></a>1. Java与Kotlin：Android开发的双剑合璧</h2><a href="/post/79a8e3a5.html" title="Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！">Android开发全指南：探索如何掌握Java与Kotlin，成为Android开发的高手！</a>

<p>作为Android开发的基石，精通Java和Kotlin这两种编程语言至关重要。</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><strong>基础语法</strong>：掌握Java的基本语法，包括变量声明、控制结构（if、for、while）以及方法定义。</li>
<li><strong>面向对象编程</strong>：深入理解类与对象、继承、多态和封装，并能够在实际项目中运用这些概念。</li>
<li><strong>多线程编程</strong>：熟练创建和管理线程，掌握解决多线程问题的同步技术。</li>
</ul>
<h3 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h3><ul>
<li><strong>简洁语法</strong>：Kotlin提供更简洁的语法，使代码更具可读性。熟悉Kotlin的空安全特性、数据类（data class）和扩展函数。</li>
<li><strong>协程</strong>：掌握Kotlin协程的基本用法，管理异步任务，避免回调地狱的困扰。</li>
<li><strong>功能性编程</strong>：利用Kotlin的高阶函数和Lambda表达式，提升代码的灵活性和可维护性。</li>
</ul>
<h2 id="2-Android基础架构组件：构建稳定应用的基石"><a href="#2-Android基础架构组件：构建稳定应用的基石" class="headerlink" title="2. Android基础架构组件：构建稳定应用的基石"></a>2. Android基础架构组件：构建稳定应用的基石</h2><p>Android架构组件是构建稳定高效应用的基石，深入理解每个组件的生命周期和作用是必要的。</p>
<h3 id="Activity与Fragment"><a href="#Activity与Fragment" class="headerlink" title="Activity与Fragment"></a>Activity与Fragment</h3><ul>
<li><strong>Activity</strong>：掌握Activity的生命周期（如onCreate、onStart、onResume）及其在不同状态下的UI状态保存与恢复。</li>
<li><strong>Fragment</strong>：理解Fragment的生命周期，掌握动态添加、移除Fragment以及Fragment间的通信。</li>
</ul>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><ul>
<li><strong>前台服务</strong>：学会创建和管理前台服务，并为其提供通知。</li>
<li><strong>后台服务</strong>：掌握如何在后台处理任务，如数据同步和网络请求。</li>
</ul>
<h3 id="BroadcastReceiver"><a href="#BroadcastReceiver" class="headerlink" title="BroadcastReceiver"></a>BroadcastReceiver</h3><ul>
<li><strong>静态与动态注册</strong>：了解如何在AndroidManifest中静态注册以及在代码中动态注册广播接收器。</li>
<li><strong>处理广播</strong>：掌握接收和处理系统广播及自定义广播的技巧。</li>
</ul>
<h3 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h3><ul>
<li><strong>数据共享</strong>：通过ContentProvider实现数据共享，允许与其他应用进行数据交互。</li>
<li><strong>CRUD操作</strong>：掌握ContentProvider的增删改查操作，以及如何处理URI匹配。</li>
</ul>
<h2 id="3-UI设计与布局：打造令人惊叹的用户界面"><a href="#3-UI设计与布局：打造令人惊叹的用户界面" class="headerlink" title="3. UI设计与布局：打造令人惊叹的用户界面"></a>3. UI设计与布局：打造令人惊叹的用户界面</h2><p>用户界面的设计直接影响用户体验，掌握UI设计的最佳实践至关重要。</p>
<h3 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h3><ul>
<li><strong>ConstraintLayout</strong>：推荐使用ConstraintLayout进行复杂布局设计，减少嵌套层级，从而提高性能。</li>
<li><strong>Material Design</strong>：熟悉Material Design的设计原则和组件，提升应用的视觉和交互体验。</li>
</ul>
<h3 id="自定义View"><a href="#自定义View" class="headerlink" title="自定义View"></a>自定义View</h3><ul>
<li><strong>创建自定义View</strong>：学会继承View类或使用ViewGroup类，创建独特的UI组件。</li>
<li><strong>性能优化</strong>：优化自定义View的绘制和布局性能，避免不必要的开销，确保流畅的用户体验。</li>
</ul>
<h2 id="4-数据存储与网络编程：实现应用的核心功能"><a href="#4-数据存储与网络编程：实现应用的核心功能" class="headerlink" title="4. 数据存储与网络编程：实现应用的核心功能"></a>4. 数据存储与网络编程：实现应用的核心功能</h2><p>数据存储和网络通信是应用功能实现的核心部分。</p>
<h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><ul>
<li><strong>SharedPreferences</strong>：适用于存储简单的键值对数据，如用户设置。</li>
<li><strong>SQLite和Room</strong>：掌握使用SQLite进行复杂的数据操作，以及如何利用Room简化数据库操作。</li>
</ul>
<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><ul>
<li><strong>OkHttp</strong>：高效的HTTP客户端库，支持同步和异步请求，提供了请求重试、缓存和拦截器功能。它可以与Retrofit配合使用，优化网络请求的性能和灵活性。</li>
<li><strong>Retrofit</strong>：使用Retrofit库进行网络请求和API接口调用，处理JSON数据。</li>
<li><strong>Glide</strong>：Glide是一个强大的图片加载库，支持从网络、本地和资源加载图片，并提供高效的内存和磁盘缓存机制，帮助提升图片加载速度和用户体验。</li>
</ul>
<h2 id="5-性能优化：让你的应用更加流畅与高效"><a href="#5-性能优化：让你的应用更加流畅与高效" class="headerlink" title="5. 性能优化：让你的应用更加流畅与高效"></a>5. 性能优化：让你的应用更加流畅与高效</h2><p>优化性能不仅能提升应用的流畅性，还能延长设备的电池寿命。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><ul>
<li><strong>内存泄漏</strong>：使用工具如LeakCanary检测和修复内存泄漏。</li>
<li><strong>优化内存使用</strong>：减少内存消耗，避免不必要的对象创建和频繁的垃圾回收。</li>
</ul>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ul>
<li><strong>Android Profiler</strong>：通过Android Studio中的Android Profiler监控CPU、内存和网络使用情况，找出性能瓶颈。</li>
</ul>
<h2 id="6-现代Android开发技术：保持竞争力的必备技能"><a href="#6-现代Android开发技术：保持竞争力的必备技能" class="headerlink" title="6. 现代Android开发技术：保持竞争力的必备技能"></a>6. 现代Android开发技术：保持竞争力的必备技能</h2><p>保持对现代技术的学习和应用，可以帮助你保持竞争力。</p>
<h3 id="Jetpack组件"><a href="#Jetpack组件" class="headerlink" title="Jetpack组件"></a>Jetpack组件</h3><ul>
<li><strong>LiveData与ViewModel</strong>：用于管理UI相关的数据，在配置更改时保持数据一致性。</li>
<li><strong>Navigation</strong>：简化应用内的导航操作，支持深链接和动态导航。</li>
</ul>
<h3 id="Jetpack-Compose"><a href="#Jetpack-Compose" class="headerlink" title="Jetpack Compose"></a>Jetpack Compose</h3><ul>
<li><strong>声明式UI</strong>：使用Compose创建现代化的声明式UI，提升UI开发效率。</li>
<li><strong>状态管理</strong>：了解如何管理Compose中的状态，优化用户交互体验。</li>
</ul>
<h3 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a>Firebase</h3><ul>
<li><strong>实时数据库与Firestore</strong>：利用Firebase实时数据库和Firestore进行数据同步和存储。</li>
<li><strong>身份验证与推送通知</strong>：实现用户身份验证和推送通知功能，增强应用的用户互动性。</li>
</ul>
<h2 id="7-测试与调试：确保应用质量的关键步骤"><a href="#7-测试与调试：确保应用质量的关键步骤" class="headerlink" title="7. 测试与调试：确保应用质量的关键步骤"></a>7. 测试与调试：确保应用质量的关键步骤</h2><p>确保应用质量和稳定性需要扎实的测试和调试技能。</p>
<h3 id="单元测试与UI测试"><a href="#单元测试与UI测试" class="headerlink" title="单元测试与UI测试"></a>单元测试与UI测试</h3><ul>
<li><strong>JUnit与Mockito</strong>：编写单元测试，使用Mockito模拟依赖，提高测试覆盖率。</li>
<li><strong>Espresso</strong>：进行UI测试，验证用户交互和界面行为是否符合预期。</li>
</ul>
<h2 id="8-依赖注入与模块化：提升代码质量的秘密武器"><a href="#8-依赖注入与模块化：提升代码质量的秘密武器" class="headerlink" title="8. 依赖注入与模块化：提升代码质量的秘密武器"></a>8. 依赖注入与模块化：提升代码质量的秘密武器</h2><p>依赖注入和模块化设计有助于提高代码的可维护性和可测试性。</p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><ul>
<li><strong>Dagger与Hilt</strong>：学习如何使用Dagger和Hilt进行依赖注入，简化对象的创建和管理。</li>
</ul>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><ul>
<li><strong>模块化架构</strong>：将应用拆分为多个模块，提高代码的复用性和开发效率。</li>
<li><strong>Gradle配置</strong>：管理多个模块的Gradle配置和依赖关系，优化构建流程。</li>
</ul>
<h2 id="9-安全与隐私：保护用户数据与应用安全的策略"><a href="#9-安全与隐私：保护用户数据与应用安全的策略" class="headerlink" title="9. 安全与隐私：保护用户数据与应用安全的策略"></a>9. 安全与隐私：保护用户数据与应用安全的策略</h2><p>应用的安全性和用户隐私保护是开发中不可忽视的部分。</p>
<h3 id="应用权限"><a href="#应用权限" class="headerlink" title="应用权限"></a>应用权限</h3><ul>
<li><strong>运行时权限</strong>：处理Android 6.0及以上版本的运行时权限请求，确保用户数据安全。</li>
</ul>
<h3 id="数据保护"><a href="#数据保护" class="headerlink" title="数据保护"></a>数据保护</h3><ul>
<li><strong>加密存储</strong>：使用加密技术保护敏感数据，防止数据泄露和非法访问。</li>
</ul>
<hr>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>从新手到高手的蜕变之路虽然充满挑战与艰辛，但只要我们保持对技术的热爱与追求，不断学习与实践，就一定能够在这条道路上越走越远、越飞越高。愿每一位Android开发者都能在这条充满希望的旅程中收获成长与成功！</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析Android AccountManagerService：账户管理的核心引擎</title>
    <url>/post/eb6a07a1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="深入剖析Android-AccountManagerService：统一账户管理的核心引擎"><a href="#深入剖析Android-AccountManagerService：统一账户管理的核心引擎" class="headerlink" title="深入剖析Android AccountManagerService：统一账户管理的核心引擎"></a>深入剖析Android AccountManagerService：统一账户管理的核心引擎</h1><blockquote>
<p><strong>“一次登录，处处通行”</strong> - Android AccountManagerService（AMS）让这个愿景成为现实。作为Android系统的账户管理中心，它像一位高效的”数字管家”，安全协调应用间的账户共享与认证流程。本文将全面解析AMS的架构设计、工作原理与实战技巧。</p>
</blockquote>
<h2 id="一、AMS：Android账户生态的基石"><a href="#一、AMS：Android账户生态的基石" class="headerlink" title="一、AMS：Android账户生态的基石"></a>一、AMS：Android账户生态的基石</h2><h3 id="1-1-为什么需要AMS？"><a href="#1-1-为什么需要AMS？" class="headerlink" title="1.1 为什么需要AMS？"></a>1.1 为什么需要AMS？</h3><p>在移动生态中，<strong>统一账户体系</strong>是提升用户体验的关键：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[用户痛点] --&gt; B[重复登录]</span><br><span class="line">    A --&gt; C[密码管理混乱]</span><br><span class="line">    A --&gt; D[账户安全风险]</span><br><span class="line">    E[AMS解决方案] --&gt; F[单点登录SSO]</span><br><span class="line">    E --&gt; G[安全凭证管理]</span><br><span class="line">    E --&gt; H[跨应用共享]</span><br></pre></td></tr></table></figure>

<h3 id="1-2-AMS核心价值矩阵"><a href="#1-2-AMS核心价值矩阵" class="headerlink" title="1.2 AMS核心价值矩阵"></a>1.2 AMS核心价值矩阵</h3><table>
<thead>
<tr>
<th>维度</th>
<th>能力</th>
<th>实现机制</th>
</tr>
</thead>
<tbody><tr>
<td><strong>安全</strong></td>
<td>密码隔离</td>
<td>令牌(Token)机制</td>
</tr>
<tr>
<td><strong>效率</strong></td>
<td>跨应用共享</td>
<td>Binder IPC通信</td>
</tr>
<tr>
<td><strong>体验</strong></td>
<td>统一管理</td>
<td>系统设置整合</td>
</tr>
<tr>
<td><strong>扩展</strong></td>
<td>协议无关</td>
<td>Authenticator接口</td>
</tr>
</tbody></table>
<hr>
<h2 id="二、架构解析：三方协作模型"><a href="#二、架构解析：三方协作模型" class="headerlink" title="二、架构解析：三方协作模型"></a>二、架构解析：三方协作模型</h2><h3 id="2-1-系统级分层架构"><a href="#2-1-系统级分层架构" class="headerlink" title="2.1 系统级分层架构"></a>2.1 系统级分层架构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    subgraph 应用层</span><br><span class="line">        A[账号提供者] --&gt; B[AuthenticatorService]</span><br><span class="line">        C[账号使用者] --&gt; D[AccountManager API]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph 框架层</span><br><span class="line">        E[AccountManagerService] --&gt; F[Session管理]</span><br><span class="line">        E --&gt; G[缓存系统]</span><br><span class="line">        E --&gt; H[加密存储]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    subgraph 内核层</span><br><span class="line">        I[Binder驱动] --&gt; J[IPC通信]</span><br><span class="line">        K[KeyStore] --&gt; L[密钥管理]</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    A --&gt; E</span><br><span class="line">    C --&gt; E</span><br><span class="line">    E --&gt; I</span><br><span class="line">    E --&gt; K</span><br></pre></td></tr></table></figure>


<h3 id="2-2-核心组件协作"><a href="#2-2-核心组件协作" class="headerlink" title="2.2 核心组件协作"></a>2.2 核心组件协作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Provider as 账号提供者</span><br><span class="line">    participant AMS as AccountManagerService</span><br><span class="line">    participant Consumer as 账号使用者</span><br><span class="line"></span><br><span class="line">    Provider-&gt;&gt;AMS: 1. 注册AuthenticatorService</span><br><span class="line">    Consumer-&gt;&gt;AMS: 2. 请求账户访问</span><br><span class="line">    AMS-&gt;&gt;Provider: 3. 路由认证请求</span><br><span class="line">    Provider-&gt;&gt;AMS: 4. 返回认证结果</span><br><span class="line">    AMS-&gt;&gt;Consumer: 5. 提供账户令牌</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、核心流程深度剖析"><a href="#三、核心流程深度剖析" class="headerlink" title="三、核心流程深度剖析"></a>三、核心流程深度剖析</h2><h3 id="3-1-账户添加流程"><a href="#3-1-账户添加流程" class="headerlink" title="3.1 账户添加流程"></a>3.1 账户添加流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统源码中的关键处理逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccount</span><span class="params">(AccountAuthenticatorResponse response, </span></span><br><span class="line"><span class="params">                      String accountType, </span></span><br><span class="line"><span class="params">                      String authTokenType)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建会话</span></span><br><span class="line">    <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Session</span>(response, accountType);</span><br><span class="line">    <span class="comment">// 绑定认证服务</span></span><br><span class="line">    session.bindToAuthenticator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动登录界面</span></span><br><span class="line">    <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(context, LoginActivity.class);</span><br><span class="line">    <span class="type">Bundle</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">    result.putParcelable(KEY_INTENT, intent);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-令牌获取机制"><a href="#3-2-令牌获取机制" class="headerlink" title="3.2 令牌获取机制"></a>3.2 令牌获取机制</h3><p><strong>动态令牌刷新流程</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[应用请求令牌] --&gt; B&#123;AMS检查缓存&#125;</span><br><span class="line">    B --&gt;|令牌有效| C[返回缓存令牌]</span><br><span class="line">    B --&gt;|令牌失效| D[调用Authenticator]</span><br><span class="line">    D --&gt; E[认证器刷新令牌]</span><br><span class="line">    E --&gt; F[更新AMS缓存]</span><br><span class="line">    F --&gt; G[返回新令牌]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、安全加固体系"><a href="#四、安全加固体系" class="headerlink" title="四、安全加固体系"></a>四、安全加固体系</h2><h3 id="4-1-防御机制矩阵"><a href="#4-1-防御机制矩阵" class="headerlink" title="4.1 防御机制矩阵"></a>4.1 防御机制矩阵</h3><table>
<thead>
<tr>
<th>攻击类型</th>
<th>防护措施</th>
<th>实现方式</th>
</tr>
</thead>
<tbody><tr>
<td><strong>LaunchAnyWhere</strong></td>
<td>调用者验证</td>
<td><code>verifyCallerSignature()</code></td>
</tr>
<tr>
<td><strong>凭证泄露</strong></td>
<td>分层加密</td>
<td>DE&#x2F;CE数据库隔离</td>
</tr>
<tr>
<td><strong>越权访问</strong></td>
<td>可见性控制</td>
<td><code>setAccountVisibility()</code></td>
</tr>
<tr>
<td><strong>中间人攻击</strong></td>
<td>通信加密</td>
<td>HTTPS+Token签名</td>
</tr>
</tbody></table>
<h3 id="4-2-分层加密存储"><a href="#4-2-分层加密存储" class="headerlink" title="4.2 分层加密存储"></a>4.2 分层加密存储</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 密钥管理核心代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">storeToken</span><span class="params">(String token, Account account)</span> &#123;</span><br><span class="line">    <span class="comment">// 使用硬件级密钥加密</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> AndroidKeyStore.encrypt(token);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分用户存储</span></span><br><span class="line">    <span class="keyword">if</span> (userUnlocked()) &#123;</span><br><span class="line">        storeInCEDB(account, encrypted);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        storeInDEDB(account, encrypted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="五、高级应用场景"><a href="#五、高级应用场景" class="headerlink" title="五、高级应用场景"></a>五、高级应用场景</h2><h3 id="5-1-跨设备同步方案"><a href="#5-1-跨设备同步方案" class="headerlink" title="5.1 跨设备同步方案"></a>5.1 跨设备同步方案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听账户变化的实现</span></span><br><span class="line">AccountManager.get(context).addOnAccountsUpdatedListener(</span><br><span class="line">    accounts -&gt; &#123;</span><br><span class="line">        <span class="comment">// 触发云端同步</span></span><br><span class="line">        CloudSync.syncAccounts(accounts);</span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="literal">null</span>, <span class="comment">// handler</span></span><br><span class="line">    <span class="literal">true</span>  <span class="comment">//立即回调</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="5-2-生物认证集成"><a href="#5-2-生物认证集成" class="headerlink" title="5.2 生物认证集成"></a>5.2 生物认证集成</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Bundle</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bundle</span>();</span><br><span class="line">options.putBoolean(AccountManager.KEY_BIOMETRIC_AUTH_REQUIRED, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">am.getAuthToken(account, <span class="string">&quot;oauth2&quot;</span>, options, (future) -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">result</span> <span class="operator">=</span> future.getResult();</span><br><span class="line">        <span class="keyword">if</span> (result.containsKey(KEY_BIOMETRIC_AUTH_RESULT)) &#123;</span><br><span class="line">            <span class="comment">// 处理生物认证结果</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">// 错误处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="六、最佳实践指南"><a href="#六、最佳实践指南" class="headerlink" title="六、最佳实践指南"></a>六、最佳实践指南</h2><h3 id="6-1-安全开发清单"><a href="#6-1-安全开发清单" class="headerlink" title="6.1 安全开发清单"></a>6.1 安全开发清单</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> [x] 使用<span class="code">`addAccountExplicitly()`</span>而非存储密码</span><br><span class="line"><span class="bullet">2.</span> [x] 实现<span class="code">`verifyCallerSignature()`</span>验证调用者</span><br><span class="line"><span class="bullet">3.</span> [x] 配置最小可见性<span class="code">`VISIBILITY_PRIVATE`</span></span><br><span class="line"><span class="bullet">4.</span> [x] 令牌设置合理有效期</span><br><span class="line"><span class="bullet">5.</span> [x] 定期调用<span class="code">`invalidateAuthToken()`</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-性能优化策略"><a href="#6-2-性能优化策略" class="headerlink" title="6.2 性能优化策略"></a>6.2 性能优化策略</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四级缓存配置建议</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomAuthenticator</span> <span class="keyword">extends</span> <span class="title class_">AbstractAccountAuthenticator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bundle <span class="title function_">getAuthToken</span><span class="params">(...)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 检查内存缓存</span></span><br><span class="line">        <span class="keyword">if</span> (tokenCache.contains(account)) <span class="keyword">return</span> cache;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 检查磁盘缓存</span></span><br><span class="line">        <span class="keyword">if</span> (diskCache.isValid(account)) <span class="keyword">return</span> diskCache.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 网络请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> fetchFromNetwork(account);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 更新缓存</span></span><br><span class="line">        updateCaches(account, token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、故障排查手册"><a href="#七、故障排查手册" class="headerlink" title="七、故障排查手册"></a>七、故障排查手册</h2><h3 id="7-1-常见错误代码解析"><a href="#7-1-常见错误代码解析" class="headerlink" title="7.1 常见错误代码解析"></a>7.1 常见错误代码解析</h3><table>
<thead>
<tr>
<th>错误码</th>
<th>含义</th>
<th>解决方案</th>
</tr>
</thead>
<tbody><tr>
<td><code>ERROR_CODE_INVALID_RESPONSE</code></td>
<td>响应格式错误</td>
<td>检查Bundle键值</td>
</tr>
<tr>
<td><code>ERROR_CODE_NETWORK_ERROR</code></td>
<td>网络不可达</td>
<td>重试机制+超时处理</td>
</tr>
<tr>
<td><code>ERROR_CODE_UNSUPPORTED_OPERATION</code></td>
<td>非法操作</td>
<td>验证账户类型权限</td>
</tr>
<tr>
<td><code>ERROR_CODE_BAD_AUTHENTICATION</code></td>
<td>认证失败</td>
<td>刷新凭证或令牌</td>
</tr>
</tbody></table>
<h3 id="7-2-调试命令速查"><a href="#7-2-调试命令速查" class="headerlink" title="7.2 调试命令速查"></a>7.2 调试命令速查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看账户列表</span></span><br><span class="line">adb shell dumpsys account list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制同步账户</span></span><br><span class="line">adb shell content call --uri content://com.android.accounts/account_sync \</span><br><span class="line">  --method SYNC --arg account_type=com.example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除账户缓存</span></span><br><span class="line">adb shell pm clear com.android.account</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="结语：未来演进方向"><a href="#结语：未来演进方向" class="headerlink" title="结语：未来演进方向"></a>结语：未来演进方向</h2><p>随着<strong>跨设备生态系统</strong>的发展，AMS正在向新维度演进：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[手机] --&gt; C(AMS云端同步中心)</span><br><span class="line">    B[平板] --&gt; C</span><br><span class="line">    D[汽车系统] --&gt; C</span><br><span class="line">    E[智能家居] --&gt; C</span><br><span class="line">    C --&gt; F&#123;统一账户状态&#125;</span><br><span class="line">    F --&gt; G[无缝切换体验]</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>“优秀的账户系统是数字生活的通行证”</strong> - AMS通过安全与便捷的平衡，让用户在不同应用和设备间自由穿梭，这正是Android生态的核心竞争力所在。</p>
</blockquote>
<p><strong>扩展阅读</strong>：</p>
<ul>
<li><a href="https://developer.android.com/reference/android/accounts/AccountManager">https://developer.android.com/reference/android/accounts/AccountManager</a></li>
<li><a href="https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/accounts/AccountManagerService.java">https://cs.android.com/android/platform/superproject/+/master:frameworks/base/services/core/java/com/android/server/accounts/AccountManagerService.java</a></li>
</ul>
]]></content>
      <categories>
        <category>Android系统开发</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>AccountManager</tag>
        <tag>系统服务</tag>
        <tag>账户管理</tag>
        <tag>单点登录</tag>
        <tag>OAuth2</tag>
        <tag>安全机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 命令入门指南：从零掌握代码版本管理</title>
    <url>/post/ef2b76b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Git-命令入门指南：从零掌握代码版本管理"><a href="#Git-命令入门指南：从零掌握代码版本管理" class="headerlink" title="Git 命令入门指南：从零掌握代码版本管理"></a>Git 命令入门指南：从零掌握代码版本管理</h3><p>Git 作为分布式版本控制系统，是开发者日常协作与代码管理的核心工具。本文基于多篇开发者社区及官方文档的总结，整理了 <strong>最常用且必备的 Git 命令</strong>，助你快速上手。</p>
<hr>
<h4 id="一、环境配置与仓库初始化"><a href="#一、环境配置与仓库初始化" class="headerlink" title="一、环境配置与仓库初始化"></a>一、环境配置与仓库初始化</h4><ol>
<li><p><strong>用户身份标识</strong><br>每次提交代码时，Git 需要记录操作者信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;YourName&quot;</span>  <span class="comment"># 设置全局用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;email@example.com&quot;</span>  <span class="comment"># 设置全局邮箱</span></span><br><span class="line">git config --list  <span class="comment"># 查看所有配置项</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>SSH Key 生成（远程仓库连接必备）</strong><br>用于免密推送代码到 GitHub&#x2F;GitLab 等平台：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span>  <span class="comment"># 生成密钥对</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建仓库</strong>  </p>
<ul>
<li>本地初始化：<code>git init</code>（生成隐藏的 .git 目录）  </li>
<li>克隆远程仓库：<code>git clone https://github.com/xxx/xxx.git</code></li>
</ul>
</li>
</ol>
<hr>
<h4 id="二、日常开发核心操作"><a href="#二、日常开发核心操作" class="headerlink" title="二、日常开发核心操作"></a>二、日常开发核心操作</h4><ol start="4">
<li><p><strong>代码提交流程</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .                <span class="comment"># 添加所有修改到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;功能描述&quot;</span>  <span class="comment"># 提交到本地仓库</span></span><br><span class="line">git status               <span class="comment"># 查看文件状态（红/绿色提示）</span></span><br><span class="line">git <span class="built_in">log</span> --oneline        <span class="comment"># 查看精简版提交历史</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分支管理</strong>  </p>
<ul>
<li>创建与切换：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch dev          <span class="comment"># 创建分支</span></span><br><span class="line">git checkout dev       <span class="comment"># 切换分支（旧版）</span></span><br><span class="line">git switch -c dev      <span class="comment"># 新版推荐命令</span></span><br></pre></td></tr></table></figure></li>
<li>合并与冲突解决：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge dev          <span class="comment"># 将 dev 分支合并到当前分支</span></span><br><span class="line"><span class="comment"># 合并冲突后，手动修改文件 → git add → git commit</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>远程仓库交互</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin URL   <span class="comment"># 关联远程仓库</span></span><br><span class="line">git push -u origin main     <span class="comment"># 首次推送并建立追踪</span></span><br><span class="line">git pull origin dev         <span class="comment"># 拉取远程分支更新</span></span><br><span class="line">git fetch                   <span class="comment"># 仅获取远程变更（不自动合并）</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="三、高阶操作与问题处理"><a href="#三、高阶操作与问题处理" class="headerlink" title="三、高阶操作与问题处理"></a>三、高阶操作与问题处理</h4><ol start="7">
<li><p><strong>撤销与回退</strong>  </p>
<ul>
<li>丢弃工作区修改：<code>git checkout -- filename</code>  </li>
<li>撤销暂存区文件：<code>git reset HEAD filename</code>  </li>
<li>版本回退：<code>git reset --hard commit_id</code>（慎用）</li>
</ul>
</li>
<li><p><strong>暂存与恢复</strong><br>临时保存未完成的修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash        <span class="comment"># 保存当前工作进度</span></span><br><span class="line">git stash pop    <span class="comment"># 恢复最近一次暂存内容</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>标签管理</strong>  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag v1.0.0           <span class="comment"># 创建轻量标签</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot;描述&quot;</span> <span class="comment"># 含备注的标签</span></span><br><span class="line">git push origin --tags    <span class="comment"># 推送所有标签到远程</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="四、协作开发建议"><a href="#四、协作开发建议" class="headerlink" title="四、协作开发建议"></a>四、协作开发建议</h4><ol>
<li><strong>分支策略</strong>：主分支（main&#x2F;master）仅用于发布稳定版本，新功能在 dev 或 feature 分支开发。  </li>
<li><strong>提交规范</strong>：commit 信息需清晰描述修改内容，推荐使用 <a href="https://www.conventionalcommits.org/">Conventional Commits</a> 格式。  </li>
<li><strong>冲突预防</strong>：频繁使用 <code>git pull --rebase</code> 保持本地与远程同步，减少合并冲突。</li>
</ol>
<hr>
<h4 id="附：完整命令速查表（部分）"><a href="#附：完整命令速查表（部分）" class="headerlink" title="附：完整命令速查表（部分）"></a>附：完整命令速查表（部分）</h4><table>
<thead>
<tr>
<th>类别</th>
<th>命令示例</th>
<th>作用说明</th>
</tr>
</thead>
<tbody><tr>
<td>配置</td>
<td><code>git config --list</code></td>
<td>查看所有配置项</td>
</tr>
<tr>
<td>提交</td>
<td><code>git commit -am &quot;msg&quot;</code></td>
<td>跳过暂存区直接提交已追踪文件</td>
</tr>
<tr>
<td>分支</td>
<td><code>git branch -d dev</code></td>
<td>删除已合并的分支</td>
</tr>
<tr>
<td>远程</td>
<td><code>git remote -v</code></td>
<td>查看远程仓库地址</td>
</tr>
<tr>
<td>日志</td>
<td><code>git log --graph --oneline</code></td>
<td>图形化显示分支合并历史</td>
</tr>
</tbody></table>
<p>更多完整命令可参考：<a href="https://git-scm.com/doc">Git 官方文档</a> 或腾讯云开发者社区的《Git 常用命令汇总》。</p>
<hr>
<p><strong>学习提示</strong>：建议通过可视化工具（如 VS Code 的 Git 插件或 GitHub Desktop）辅助理解操作流程，再逐步熟悉命令行操作。</p>
]]></content>
  </entry>
  <entry>
    <title>Android面试必备：Java核心100题深度拆解（附高频考点）</title>
    <url>/post/d0bfb046.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Android程序员Java面试100问（难度分级版）"><a href="#Android程序员Java面试100问（难度分级版）" class="headerlink" title="Android程序员Java面试100问（难度分级版）"></a>Android程序员Java面试100问（难度分级版）</h3><hr>
<h4 id="一、初级问题（30问）"><a href="#一、初级问题（30问）" class="headerlink" title="一、初级问题（30问）"></a><strong>一、初级问题（30问）</strong></h4><ol>
<li>final、finally、finalize的区别</li>
<li>String、StringBuffer、StringBuilder的线程安全性与使用场景  </li>
<li>重载（Overload）与重写（Override）的区别  </li>
<li>接口与抽象类的核心区别  </li>
<li>ArrayList与LinkedList的底层实现及性能差异  </li>
<li>HashMap与HashTable的线程安全性对比  </li>
<li>&#x3D;&#x3D;与equals()的区别  </li>
<li>进程与线程的区别  </li>
<li>线程的创建方式（Thread、Runnable、Callable）  </li>
<li>sleep()与wait()的区别  </li>
<li>集合框架中Set如何判断元素重复？  </li>
<li>Java的四种引用类型（强、软、弱、虚）  </li>
<li>泛型擦除原理及作用  </li>
<li>异常分类（Error、Checked Exception、RuntimeException）  </li>
<li>静态内部类与非静态内部类的区别  </li>
<li>单例模式的饿汉式与懒汉式实现  </li>
<li>Java8新特性（Lambda、Stream API）  </li>
<li>序列化与反序列化的作用及实现  </li>
<li>反射机制的应用场景与性能问题  </li>
<li>Java基本数据类型与包装类的自动拆装箱  </li>
<li>String s &#x3D; new String(“abc”)创建了几个对象？  </li>
<li>Java的跨平台原理（JVM作用）  </li>
<li>深拷贝与浅拷贝的实现方式  </li>
<li>数组与链表的优缺点对比  </li>
<li>多态的实现原理（方法重写、动态绑定）  </li>
<li>Java内存模型（堆、栈、方法区）  </li>
<li>线程的六种状态及转换  </li>
<li>volatile关键字的作用（可见性、禁止指令重排）  </li>
<li>synchronized的锁升级过程（偏向锁→轻量级锁→重量级锁）  </li>
<li>如何避免死锁？</li>
</ol>
<hr>
<h4 id="二、中级问题（40问）"><a href="#二、中级问题（40问）" class="headerlink" title="二、中级问题（40问）"></a><strong>二、中级问题（40问）</strong></h4><ol start="31">
<li>HashMap的底层实现（数组+链表&#x2F;红黑树）及扩容机制</li>
<li>ConcurrentHashMap的分段锁原理  </li>
<li>线程池参数设计（核心线程数、阻塞队列、拒绝策略）  </li>
<li>AQS（AbstractQueuedSynchronizer）的实现原理  </li>
<li>CAS原理及ABA问题解决方案  </li>
<li>JVM内存区域划分（堆、栈、元空间）  </li>
<li>垃圾回收算法（标记-清除、复制、标记-整理）  </li>
<li>G1垃圾回收器的Region分区策略  </li>
<li>内存泄漏常见场景（Handler、静态集合、未关闭资源）  </li>
<li>ANR的产生原因及排查方法  </li>
<li>Android中Handler机制（Looper、MessageQueue）  </li>
<li>Binder跨进程通信原理  </li>
<li>View的绘制流程（measure→layout→draw）  </li>
<li>事件分发机制（onTouchEvent、onInterceptTouchEvent）  </li>
<li>RecyclerView与ListView的缓存机制对比  </li>
<li>Glide的四级缓存策略  </li>
<li>OkHttp的拦截器链设计  </li>
<li>Retrofit的动态代理实现原理  </li>
<li>MVC、MVP、MVVM架构模式的优缺点  </li>
<li>LiveData与RxJava的区别及使用场景  </li>
<li>Jetpack组件（ViewModel、Room、WorkManager）的核心功能  </li>
<li>启动优化方案（冷启动耗时分析、类预加载）  </li>
<li>包体积优化策略（资源压缩、代码混淆、动态加载）  </li>
<li>内存抖动检测与优化（MAT工具分析）  </li>
<li>设计模式：观察者模式在Android中的应用（如LiveData）  </li>
<li>设计模式：Builder模式在AlertDialog中的实践  </li>
<li>设计模式：适配器模式在RecyclerView中的应用  </li>
<li>设计模式：代理模式实现AOP编程  </li>
<li>动态代理与静态代理的区别  </li>
<li>Kotlin协程的挂起函数原理（Continuation状态机）  </li>
<li>Dagger2依赖注入的实现原理  </li>
<li>模块化开发中ARouter的路由实现  </li>
<li>APK打包流程（aapt→dex→签名→对齐）  </li>
<li>热修复原理（类替换、资源替换）  </li>
<li>插件化框架实现原理（Hook ClassLoader）  </li>
<li>HTTP与HTTPS的区别（对称加密、非对称加密）  </li>
<li>TCP三次握手与四次挥手过程  </li>
<li>WebSocket长连接的心跳机制设计  </li>
<li>Retrofit如何实现网络请求的同步与异步调用？  </li>
<li>SQLite数据库的事务特性及优化方案</li>
</ol>
<hr>
<h4 id="三、高级问题（30问）"><a href="#三、高级问题（30问）" class="headerlink" title="三、高级问题（30问）"></a><strong>三、高级问题（30问）</strong></h4><ol start="71">
<li>JVM调优实战（G1参数配置、Full GC触发条件）</li>
<li>分布式锁的Redis实现（SETNX+过期时间）  </li>
<li>微服务架构中的服务熔断与降级策略  </li>
<li>如何设计高并发下的红包系统？  </li>
<li>如何实现APK的差分更新（bsdiff算法）？  </li>
<li>性能监控体系搭建（APM工具、线上ANR&#x2F;OOM监控）  </li>
<li>LeakCanary检测内存泄漏的原理（KeyedWeakReference）  </li>
<li>卡顿优化的系统性方案（Choreographer监测FPS）  </li>
<li>大图加载的优化策略（BitmapRegionDecoder分块加载）  </li>
<li>跨平台技术选型（Flutter线程模型、React Native桥接机制）  </li>
<li>如何实现Android应用的灰度发布？  </li>
<li>设计一个图片加载框架（三级缓存、线程池管理）  </li>
<li>如何实现数据埋点的全量采集与无痕打点？  </li>
<li>组件化架构中的通信方案（接口下沉、EventBus替代方案）  </li>
<li>如何实现安全的HTTPS双向认证？  </li>
<li>如何设计一个高可用的推送系统（保活、重连、消息去重）？  </li>
<li>如何实现Android应用的线上热修复（Sophix原理）？  </li>
<li>如何优化冷启动速度至500ms以内？  </li>
<li>如何通过Gradle插件实现编译期的代码检查？  </li>
<li>如何设计一个支持千万级用户的IM系统？  </li>
<li>如何实现Android Native与WebView的双向通信？  </li>
<li>如何设计一个支持动态替换的主题引擎？  </li>
<li>如何通过ASM实现字节码插桩（性能监控、日志埋点）？  </li>
<li>如何优化ProGuard混淆策略以平衡安全性与包体积？  </li>
<li>如何实现跨进程的ViewModel数据共享？  </li>
<li>如何设计支持AB实验的配置中心？  </li>
<li>如何实现基于Walle的多渠道打包方案？  </li>
<li>如何通过RenderScript实现图片的高斯模糊？  </li>
<li>如何设计一个支持离线优先的本地缓存策略？  </li>
<li>如何通过FFmpeg实现Android音视频的硬解码？</li>
</ol>
<hr>
<h3 id="关键知识领域覆盖"><a href="#关键知识领域覆盖" class="headerlink" title="关键知识领域覆盖"></a><strong>关键知识领域覆盖</strong></h3><ul>
<li><strong>Java核心</strong>：集合框架、多线程、JVM  </li>
<li><strong>Android特性</strong>：组件、性能优化、架构设计  </li>
<li><strong>系统设计</strong>：高并发、分布式、微服务  </li>
<li><strong>前沿技术</strong>：Flutter、Kotlin协程、热修复</li>
</ul>
<p>（注：以上问题结合了Java通用知识与Android特性，建议根据实际项目经验针对性准备，完整答案可参考来源文档-）</p>
<h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><ol>
<li>final 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>学Java？这里有一本秘籍！</title>
    <url>/post/java-base-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><blockquote>
<p>适用于没有Java基础的同学</p>
</blockquote>
<p>先过一遍 <a href="https://www.runoob.com/java/java-tutorial.html">Java教程</a> ，示例可以在 <a href="https://www.runoob.com/try/runcode.php?filename=HelloWorld&type=java">菜鸟教程在线编辑器</a> 边刷教程边写代码。</p>
<h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p>这是一个经常容易被忽略，却<strong>极其重要</strong>的部分，不要让自己的代码别人看了就想吐。刷一下 <a href="https://pdai.tech/md/dev-spec/code-style/dev-x-overview.html">常见企业级代码规范</a>，包括《阿里巴巴 Java 开发手册》、《Google Java 编程风格指南》、《Twitter Java Style Guide》</p>
<h1 id="基础巩固"><a href="#基础巩固" class="headerlink" title="基础巩固"></a>基础巩固</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>阅读：<a href="https://pdai.tech/md/java/basic/java-basic-oop.html">Java 基础 - 面向对象</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.Java三大特性：继承、封装、多态；</span><br><span class="line">2.编译时多态和运行时多态；</span><br><span class="line">3.UML图；</span><br></pre></td></tr></table></figure>

<blockquote>
<p>UML的前置知识回顾： <a href="https://www.runoob.com/java/java-object-classes.html">Java教程-Java 对象和类</a> </p>
</blockquote>
<p>阅读：<a href="https://alexyyek.github.io/2014/12/29/wrapperClass/">JAVA基本类型和包装类</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.八大基本数据类型及其包装类；</span><br><span class="line">2.包装类的作用；</span><br><span class="line">3.装箱和拆箱，及其实现原理；</span><br><span class="line">4.==和equals的区别 - 缓存池；</span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>阅读：<a href="https://www.cnblogs.com/jojop/p/11317313.html">【Java基础】String 相关知识点总结</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.String为什么设计成不可变及其好处；</span><br><span class="line">2.字符串常量池和intern()</span><br><span class="line">3.String s = new String(&quot;abc&quot;);创建几个对象</span><br></pre></td></tr></table></figure>




<h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><p>阅读：<a href="https://xie.infoq.cn/article/3b36d7b4c0aa0c53bff2ae9b5">java 异常分类和处理机制</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.异常分类：Throwable=Error+Exception(编译时异常+运行时异常)；设计为RuntimeException，可不显示捕获；</span><br><span class="line">2.异常处理机制：try..catch..finally</span><br><span class="line">3.如何优雅的设计异常：有无法处理的问题的时候，需要抛出异常；不要用异常来控制业务逻辑；</span><br></pre></td></tr></table></figure>

<h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><p>阅读：<a href="https://www.cnblogs.com/yichunguo/p/11775270.html">史上最骚最全最详细的IO流教程，没有之一！</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.如何从名称一眼看出IO流的分类；</span><br><span class="line">2.File的定位，与IO流的关系</span><br><span class="line">3.createNewFile方法以及mkdir与mkdirs的区别</span><br><span class="line">4.字节流、字符流、缓冲流的继承体系</span><br><span class="line">5.FileInputStream读取数据的流程和注意事项（为什么要在while循环读length？）</span><br><span class="line">6.字节流如何借用String的解码功能读取中文字符</span><br><span class="line">7.flush()：既想写出数据，又想继续使用流（内置缓存区）</span><br><span class="line">8.快速复制：缓冲流+数组</span><br><span class="line">9.编码和解码、字符集（字符流=字节流+编码表）、转换流，转换的时候传入编码表（最高效率：BufferedReader内包装InputStreamReader）</span><br><span class="line">10.序列化</span><br><span class="line">11.打印流及其特点</span><br><span class="line">12.Properties的load(InputStream inStream)</span><br></pre></td></tr></table></figure>

<p>扩展阅读：<a href="https://www.jianshu.com/p/258c5ce1a2bd">java try-with-resource语句使用</a></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>阅读：<a href="https://gityuan.com/2016/01/23/java-annotation/">Java注解(Annotation)</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.注解类型：Documented、Inherited、Retention、Target；</span><br><span class="line">2.注解生命周期；</span><br><span class="line">3.反射注解；</span><br></pre></td></tr></table></figure>



<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>阅读：<a href="https://juejin.cn/post/6943770419820396580">Java 泛型最全指南</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.什么是泛型？泛型类、泛型接口、泛型方法；</span><br><span class="line">2.结合继承了解泛型的使用；</span><br><span class="line">3.泛型的上界和下界，泛型通配符；</span><br><span class="line">4.泛型擦除；</span><br><span class="line">5.使用泛型的建议：指定类型信息可结合kotlin的；</span><br></pre></td></tr></table></figure>

<p>扩展阅读：<a href="https://juejin.cn/post/6935322686943920159">一文读懂 Java 和 Kotlin 的泛型难点</a> ，可以学到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">逆变和协变</span><br></pre></td></tr></table></figure>



<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>阅读：<a href="https://juejin.cn/user/2727264149845725/posts">Java反射的深入理解以及超级详细的使用方式</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.反射的原理；</span><br><span class="line">2.反射的使用：操作构造器、操作成员变量、操作成员方法、操作注解；</span><br><span class="line">3.AccessibleObject和setAccessible()</span><br></pre></td></tr></table></figure>

<p>扩展阅读：<a href="https://blog.csdn.net/zhangzeyuaaa/article/details/42522015">Java 反射调用静态方法</a></p>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>阅读：<a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">Java 8系列之重新认识HashMap</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.源码原理：确定哈希索引位置、put流程、扩容机制</span><br><span class="line">2.HashMap大小为什么是2的n次方 &amp; JDK1.8 hash算法的巧妙之处：&amp;替代%；一半索引没变；</span><br><span class="line">3.HashMap为什么会出现死循环？</span><br></pre></td></tr></table></figure>

<p>扩展阅读：<a href="https://www.cnblogs.com/xuwc/p/14044664.html">并发-HashMap在jdk1.8也会出现死循环 </a></p>
<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>阅读：<a href="https://tech.meituan.com/2018/11/15/java-lock.html">不可不说的Java“锁”事</a> ，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.锁的分类</span><br><span class="line">2.乐观锁和悲观锁、自旋锁和自适应自旋锁</span><br><span class="line">3.CAS和三大问题（ABA、开销大、多个变量的原子性）</span><br><span class="line">4.无锁、偏向锁、轻量级锁、重量级锁：Java对象头（Mark Word、Klass Point）、Monitor</span><br><span class="line">  轻量级锁和重量级锁的区别</span><br><span class="line">5.公平锁和非公平锁</span><br><span class="line">6.可重入锁和不可重入锁</span><br><span class="line">7.独享锁和共享锁（读写锁）</span><br></pre></td></tr></table></figure>

<p>扩展阅读：<a href="https://blog.csdn.net/Shockang/article/details/125610298">一篇文章理解 Java 中的 Unsafe 类</a>，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.如何获取Unsafe实例？</span><br><span class="line">2.如何通过Unsafe创建对象？</span><br><span class="line">3.如何通过Unsafe修改private？</span><br><span class="line">4.堆外内存使用；</span><br><span class="line">5.CAS的使用；</span><br><span class="line">6.park/unpark的使用；</span><br></pre></td></tr></table></figure>


<h2 id="线程安全的三大特性"><a href="#线程安全的三大特性" class="headerlink" title="线程安全的三大特性"></a>线程安全的三大特性</h2><p>阅读：<a href="https://blog.csdn.net/tian830937/article/details/129602241">线程安全性详解(原子性、可见性、有序性)</a>，可以学习到：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1.原子性：CAS算法，ABA问题及解决；</span><br><span class="line">2.可见性：主内存和工作内存、synchronized和volatile对比</span><br><span class="line">  内存屏障和禁止重排序，count++的执行逻辑；</span><br><span class="line">3.有序性：as-if-serial语义规则、happens-before原则</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试！通过问题来串联知识</title>
    <url>/post/5d81f735.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Android程序员Java面试100问（难度分级版）"><a href="#Android程序员Java面试100问（难度分级版）" class="headerlink" title="Android程序员Java面试100问（难度分级版）"></a>Android程序员Java面试100问（难度分级版）</h3><hr>
<h4 id="一、初级问题（30问）"><a href="#一、初级问题（30问）" class="headerlink" title="一、初级问题（30问）"></a><strong>一、初级问题（30问）</strong></h4><ol>
<li>final、finally、finalize的区别</li>
<li>String、StringBuffer、StringBuilder的线程安全性与使用场景  </li>
<li>重载（Overload）与重写（Override）的区别  </li>
<li>接口与抽象类的核心区别  </li>
<li>ArrayList与LinkedList的底层实现及性能差异  </li>
<li>HashMap与HashTable的线程安全性对比  </li>
<li>&#x3D;&#x3D;与equals()的区别  </li>
<li>进程与线程的区别  </li>
<li>线程的创建方式（Thread、Runnable、Callable）  </li>
<li>sleep()与wait()的区别  </li>
<li>集合框架中Set如何判断元素重复？  </li>
<li>Java的四种引用类型（强、软、弱、虚）  </li>
<li>泛型擦除原理及作用  </li>
<li>异常分类（Error、Checked Exception、RuntimeException）  </li>
<li>静态内部类与非静态内部类的区别  </li>
<li>单例模式的饿汉式与懒汉式实现  </li>
<li>Java8新特性（Lambda、Stream API）  </li>
<li>序列化与反序列化的作用及实现  </li>
<li>反射机制的应用场景与性能问题  </li>
<li>Java基本数据类型与包装类的自动拆装箱  </li>
<li>String s &#x3D; new String(“abc”)创建了几个对象？  </li>
<li>Java的跨平台原理（JVM作用）  </li>
<li>深拷贝与浅拷贝的实现方式  </li>
<li>数组与链表的优缺点对比  </li>
<li>多态的实现原理（方法重写、动态绑定）  </li>
<li>Java内存模型（堆、栈、方法区）  </li>
<li>线程的六种状态及转换  </li>
<li>volatile关键字的作用（可见性、禁止指令重排）  </li>
<li>synchronized的锁升级过程（偏向锁→轻量级锁→重量级锁）  </li>
<li>如何避免死锁？</li>
</ol>
<hr>
<h4 id="二、中级问题（40问）"><a href="#二、中级问题（40问）" class="headerlink" title="二、中级问题（40问）"></a><strong>二、中级问题（40问）</strong></h4><ol start="31">
<li><strong>HashMap的底层实现（数组+链表&#x2F;红黑树）及扩容机制</strong>  </li>
<li>ConcurrentHashMap的分段锁原理  </li>
<li>线程池参数设计（核心线程数、阻塞队列、拒绝策略）  </li>
<li>AQS（AbstractQueuedSynchronizer）的实现原理  </li>
<li>CAS原理及ABA问题解决方案  </li>
<li>JVM内存区域划分（堆、栈、元空间）  </li>
<li>垃圾回收算法（标记-清除、复制、标记-整理）  </li>
<li>G1垃圾回收器的Region分区策略  </li>
<li>内存泄漏常见场景（Handler、静态集合、未关闭资源）  </li>
<li>ANR的产生原因及排查方法  </li>
<li>Android中Handler机制（Looper、MessageQueue）  </li>
<li>Binder跨进程通信原理  </li>
<li>View的绘制流程（measure→layout→draw）  </li>
<li>事件分发机制（onTouchEvent、onInterceptTouchEvent）  </li>
<li>RecyclerView与ListView的缓存机制对比  </li>
<li>Glide的四级缓存策略  </li>
<li>OkHttp的拦截器链设计  </li>
<li>Retrofit的动态代理实现原理  </li>
<li>MVC、MVP、MVVM架构模式的优缺点  </li>
<li>LiveData与RxJava的区别及使用场景  </li>
<li>Jetpack组件（ViewModel、Room、WorkManager）的核心功能  </li>
<li>启动优化方案（冷启动耗时分析、类预加载）  </li>
<li>包体积优化策略（资源压缩、代码混淆、动态加载）  </li>
<li>内存抖动检测与优化（MAT工具分析）  </li>
<li>设计模式：观察者模式在Android中的应用（如LiveData）  </li>
<li>设计模式：Builder模式在AlertDialog中的实践  </li>
<li>设计模式：适配器模式在RecyclerView中的应用  </li>
<li>设计模式：代理模式实现AOP编程  </li>
<li>动态代理与静态代理的区别  </li>
<li>Kotlin协程的挂起函数原理（Continuation状态机）  </li>
<li>Dagger2依赖注入的实现原理  </li>
<li>模块化开发中ARouter的路由实现  </li>
<li>APK打包流程（aapt→dex→签名→对齐）  </li>
<li>热修复原理（类替换、资源替换）  </li>
<li>插件化框架实现原理（Hook ClassLoader）  </li>
<li>HTTP与HTTPS的区别（对称加密、非对称加密）  </li>
<li>TCP三次握手与四次挥手过程  </li>
<li>WebSocket长连接的心跳机制设计  </li>
<li>Retrofit如何实现网络请求的同步与异步调用？  </li>
<li>SQLite数据库的事务特性及优化方案</li>
</ol>
<hr>
<h4 id="三、高级问题（30问）"><a href="#三、高级问题（30问）" class="headerlink" title="三、高级问题（30问）"></a><strong>三、高级问题（30问）</strong></h4><ol start="71">
<li><strong>JVM调优实战（G1参数配置、Full GC触发条件）</strong>  </li>
<li>分布式锁的Redis实现（SETNX+过期时间）  </li>
<li>微服务架构中的服务熔断与降级策略  </li>
<li>如何设计高并发下的红包系统？  </li>
<li>如何实现APK的差分更新（bsdiff算法）？  </li>
<li>性能监控体系搭建（APM工具、线上ANR&#x2F;OOM监控）  </li>
<li>LeakCanary检测内存泄漏的原理（KeyedWeakReference）  </li>
<li>卡顿优化的系统性方案（Choreographer监测FPS）  </li>
<li>大图加载的优化策略（BitmapRegionDecoder分块加载）  </li>
<li>跨平台技术选型（Flutter线程模型、React Native桥接机制）  </li>
<li>如何实现Android应用的灰度发布？  </li>
<li>设计一个图片加载框架（三级缓存、线程池管理）  </li>
<li>如何实现数据埋点的全量采集与无痕打点？  </li>
<li>组件化架构中的通信方案（接口下沉、EventBus替代方案）  </li>
<li>如何实现安全的HTTPS双向认证？  </li>
<li>如何设计一个高可用的推送系统（保活、重连、消息去重）？  </li>
<li>如何实现Android应用的线上热修复（Sophix原理）？  </li>
<li>如何优化冷启动速度至500ms以内？  </li>
<li>如何通过Gradle插件实现编译期的代码检查？  </li>
<li>如何设计一个支持千万级用户的IM系统？  </li>
<li>如何实现Android Native与WebView的双向通信？  </li>
<li>如何设计一个支持动态替换的主题引擎？  </li>
<li>如何通过ASM实现字节码插桩（性能监控、日志埋点）？  </li>
<li>如何优化ProGuard混淆策略以平衡安全性与包体积？  </li>
<li>如何实现跨进程的ViewModel数据共享？  </li>
<li>如何设计支持AB实验的配置中心？  </li>
<li>如何实现基于Walle的多渠道打包方案？  </li>
<li>如何通过RenderScript实现图片的高斯模糊？  </li>
<li>如何设计一个支持离线优先的本地缓存策略？  </li>
<li>如何通过FFmpeg实现Android音视频的硬解码？</li>
</ol>
<hr>
<h3 id="关键知识领域覆盖"><a href="#关键知识领域覆盖" class="headerlink" title="关键知识领域覆盖"></a><strong>关键知识领域覆盖</strong></h3><ul>
<li><strong>Java核心</strong>：集合框架、多线程、JVM  </li>
<li><strong>Android特性</strong>：组件、性能优化、架构设计  </li>
<li><strong>系统设计</strong>：高并发、分布式、微服务  </li>
<li><strong>前沿技术</strong>：Flutter、Kotlin协程、热修复</li>
</ul>
<p>（注：以上问题结合了Java通用知识与Android特性，建议根据实际项目经验针对性准备，完整答案可参考来源文档-）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>Java</tag>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
